<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[雲筏科技 歐洲9元NAT-VPS Cloudflare純IPV6建站]]></title>
    <url>%2F2020%2F09%2F08%2F%E4%BA%91%E7%AD%8F%E7%A7%91%E6%8A%80%20%E6%AC%A7%E6%B4%B29%E5%85%83NAT-VPS%E8%AF%84%E6%B5%8B%2F</url>
    <content type="text"><![CDATA[雲筏科技 歐洲9元NAT-VPS Cloudflare純IPV6建站雲筏科技最近改版了，之前用過他家的大盤雞，現在改版後反而下架了。但是出了個9元最低配的歐洲NAT主機，還有IPv6。 基本信息 E5 1650 v3 1 x Core 1G RAM 40G系統盤+10G數據盤 網絡30Mbps（測 試中為上載限速30M） 提供10個IPv4端口 1個IPv6地址 實際測試ifconfig中，有兩個IPv6，一個是128長度的，一個是64長度的。 NAT IPv4與兩個IPv6都位於德國 基本測試使用以下腳本跑了基本測試 1wget -qO- bench.sh | bash 測試結果 1234567891011121314151617181920212223242526272829303132333435---------------------------------------------------------------------- CPU Model : Intel(R) Xeon(R) CPU E5-1650 v3 @ 3.50GHz CPU Cores : 1 CPU Frequency : 3491.912 MHz CPU Cache : 15360 KB Total Disk : 49.8 GB (1.7 GB Used) Total Mem : 908 MB (527 MB Used) Total Swap : 0 MB (0 MB Used) System uptime : 0 days, 0 hour 22 min Load average : 0.00, 0.02, 0.11 OS : CentOS 7.7.1908 Arch : x86_64 (64 Bit) Kernel : 3.10.0-1062.4.3.el7.x86_64 TCP CC : cubic Virtualization : Hyper-V Organization : AS24940 Hetzner Online GmbH Location : Frankfurt am Main / DE Region : Hesse---------------------------------------------------------------------- I/O Speed(1st run) : 304 MB/s I/O Speed(2nd run) : 313 MB/s I/O Speed(3rd run) : 313 MB/s Average I/O speed : 310.0 MB/s---------------------------------------------------------------------- Node Name Upload Speed Download Speed Latency Speedtest.net 29.17 Mbps 605.76 Mbps 0.94 ms Beijing CU 27.21 Mbps 355.66 Mbps 245.48 ms Shanghai CT 0.49 Mbps 25.68 Mbps 236.93 ms Shanghai CU 27.23 Mbps 381.04 Mbps 286.30 ms Shenzhen CU 28.06 Mbps 360.45 Mbps 324.82 ms Shenzhen CM 28.32 Mbps 427.49 Mbps 233.97 ms Hongkong CN 26.26 Mbps 312.03 Mbps 196.09 ms Singapore SG 23.95 Mbps 413.83 Mbps 252.61 ms Tokyo JP 27.87 Mbps 124.35 Mbps 273.54 ms---------------------------------------------------------------------- 可以看見，這款VPS與中國聯通、中國移動的連接相當不錯，可以跑滿30Mbps的帶寬。而中國電信則有點凄慘，上載只能跑到500Kbps左右。 連接海外的鏈路十分不錯，也能幾乎跑滿。可能是因爲云筏科技對服務器進行了升級，整體表現比之前他家的大盤鷄要好上一些。 IPv6架設Nextcloud實戰純IPv6也可以架設網站，并且讓純IPv4用戶可以正常訪問。原理是使用CDN中轉網站的流量，讓CDN服務商幫我們把IPv4請求轉發成IPv6請求。這裏使用最常用的Cloudflare輔助純IPv6的網站架設。 這裏使用輕量化的Caddy作爲主要的網頁伺服器。雲筏科技即便改版後加配到大數據盤也不算很貴，拿來當作Nextcloud網盤為封鎖地區中轉Google Drive也挺不錯的。 配置Cloudflare前文提到，Cloudflare可以將IPv4流量透過他們的CDN伺服器，轉發到我們的IPv6 VPS上。 如果你在Cloudflare上沒有域名，可以將自己的域名綁定到Cloudflare。如果你沒有域名，可以去Freenom免費注冊一個域名。 打開Cloudflare，進入自己的域名。打開域名的DNS頁面 按下新增記錄，將左邊的類型改成AAAA，名稱取一個自己習慣的名稱，然後將伺服器的IPv6位址填在右邊IPv6位址裏面，最後確保Proxy狀態下面的那朵云是橙色的（這代表你的流量會經過Cloudflare代理），便可以按下儲存等待DNS生效。 方法一：使用Caddy+PHP安裝Nextcloud上網找了個自動化脚本自動安裝Caddy和PHP。 1wget https://git.io/vra5C -O - -o /dev/null|bash 這個脚本是Caddy管理工具，跑完之後應該會提示輸入caddy使用脚本。官方自帶的使用説明如下 12345678910111213141516caddy start - Start Caddy Web Server.caddy stop - Stop/Shutdown Caddy Web Server.caddy reload - Reload Caddy Web Server.caddy restart - Restart Caddy Web Server.caddy status - Check Caddy Web Server is running or not or just run &apos;caddy&apos;.caddy install - Install Caddy Web Server on fresh OS.caddy install-naked - Install only Caddy Web Server and no prompt.caddy edit - Edit Caddyfile using nano or default editor.caddy service - Make Caddy Web Server start on boot (upstart/systemd). Not required because we install service on install.caddy update - Update Caddy Web Server.caddy delete - Uninstall Caddy Web Server and data. We would prompt you if you want to keep data.caddy version - Print version information.caddy about - About Caddy Web Server Installer. 輸入caddy install安裝Caddy與PHP 1234567[root@ ~]# caddy install Downloading Caddy Web Server v1.0.4 for 64bit... Extracting Caddy Web Server to /opt/caddyserver... [DONE] Are you gonna run php site? [y/N]: y 詢問你是否架設PHP網站，脚本自動輸入了y。如果選擇y的話會安裝PHP依賴文件，因爲要架設基於PHP編寫的Nextcloud，這裏只需要直接按回車即可，不需要輸入y。輸入之後便會繼續安裝，安裝完成之後會提示你輸入網站信息。 123456789101112131415Installing required php files... [DONE]Installed &apos;php-fpm php-cli php-curl curl sudo&apos;Fixing php sock issue... [DONE]Creating user &apos;caddy&apos;... [DONE]Binding port using setcap... [DONE]Creating startup service... DONECreated symlink from /etc/systemd/system/multi-user.target.wants/caddy.service to /etc/systemd/system/caddy.service.Enter your domain nameSeperated by commaDomain name:Enter your email for automated sslEmail: 提示輸入申請SSL證書的Email，輸入off，表示不需要SSL，待會用自簽證書替代letsencrypt的證書。 1234567891011/etc/Caddyfile createdindex file created/var/caddywww/index.htmlPHP-info file created/var/caddywww/info.phpDone. Caddy has been installed :)Run caddy start to start Caddy Web Server[root@nzZKNJ1000562 ~]# 先打開/etc/Caddyfile編輯網站詳情 1[root@ ~]# vi /etc/Caddyfile 修改成類似以下格式 12345678example.com,:80 &#123; root /var/caddywww gzip tls self_signed log /var/log/caddy/access.log errors /var/log/caddy/error.log fastcgi / 127.0.0.1:9000 php&#125; 其中，tls行後面的self_signed表示讓Caddy自簽證書，用於加密伺服器到Cloudflare的流量。example.com是你的域名。填寫完之後按下esc，輸入:wq保存退出。 安裝Nextcloud在伺服器目錄裏面下載Nextcloud的在綫安裝脚本，並啓動Caddy。 12345cd /var/caddywww &amp;&amp; wget https://download.nextcloud.com/server/installer/setup-nextcloud.php &amp;&amp; caddy start# 如果你是Centos7，需要輸入以下命令開啓端口firewall-cmd --add-port=443/tcp --permanentfirewall-cmd --add-port=80/tcp --permanentfirewall-cmd --reload 然後，在瀏覽器打開https://你的域名/setup-nextcloud.php。安裝Nextcloud。 下一步，選擇Nextcloud的子目錄，輸入.以安裝在網站的根目錄 等待安裝完成即可。 方法二：使用snap安裝Nextcloud（推薦）輸入以下命令安裝snap和Nextcloud 1yum install snapd -y &amp;&amp; systemctl enable --now snapd.socket &amp;&amp; sleep 10 &amp;&amp; snap install nextcloud 然後，在瀏覽器打開https://你的域名/setup-nextcloud.php。注冊管理員賬號即可。 總結雲筏科技這款VPS速度尚可，要這麽迷你款的vps跑Nextcloud這種級別的軟件的確有點吃不消。後續可能會安裝V2ray測試一下實際的代理連接速度。]]></content>
      <categories>
        <category>生活心得</category>
      </categories>
      <tags>
        <tag>心得</tag>
        <tag>技術相關</tag>
        <tag>VPS</tag>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[反向代理Github，加速國內vps從Github扒文件的速度]]></title>
    <url>%2F2020%2F02%2F09%2F%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86github%2F</url>
    <content type="text"><![CDATA[前言最近在折騰國内vps，實現反向翻墻，方便看國内的正版資源，加速國内網盤的訪問以及免報備B站直播。但是架設各種服務的時候脫離不了Github這個世界上最大的同性交友網站。 於是想到了先前很久都在用的寶塔vps，創建了一個靜態站做反向代理。 需要使用的工具 國内能正常訪問的海外Vps 寶塔面板 過程若沒有安裝寶塔面板，先用以下命令安裝寶塔 1curl -sSO http://download.bt.cn/install/new_install.sh &amp;&amp; bash new_install.sh 建議使用screen命令後臺安裝，安裝寶塔面板有編譯過程，耗時較久。 過程可以把自己擁有的域名解析到你的vps，若沒有域名建議使用Freenom注冊免費域名。這裏不再演示如何注冊與解析域名。 安裝完成後，根據推薦安裝套件安裝LNMP套裝。安裝完畢后打開網站選項卡，添加站點。 然後輸入自己的域名（把your.domain填寫為其他已經解析的域名），填寫備注和更改php版本為純靜態。 創建完成後，點擊網站名，會進入設置頁面，設置頁面先選擇SSL選項卡，然後選擇Let’s Encrypt，創建免費的SSL證書（當然你可以選擇不使用https，只使用http） 然後勾上域名的勾勾，點擊申請（注意申請的時候必須已經解析好域名），申請完畢之後就會出現部署成功的，顯示密鑰與證書的畫面。 點擊左邊選項卡的反向代理，添加反向代理，然後如下填寫 提交之後，你的反向代理應該已經生效了，可以試著訪問自己的網站看看是否可以正常使用。]]></content>
      <categories>
        <category>技術相關</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>反向代理</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[記錄B站ban了海外直播后的艱辛反向翻墻歷程]]></title>
    <url>%2F2020%2F01%2F13%2F%E8%A8%98%E9%8C%84B%E7%AB%99ban%E4%BA%86%E6%B5%B7%E5%A4%96%E7%9B%B4%E6%92%AD%E4%B9%8B%E5%BE%8C%E7%9A%84%E8%89%B1%E8%BE%9B%E5%8F%8D%E5%90%91%E7%BF%BB%E5%A2%BB%E6%AD%B7%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[發生了什麽事情緣起于2018年我有一天突發奇想想在Bilibili直播玩游戲，或者稍微編編曲。於是我開開心心的打開了我常用的B站賬號，打開直播中心，按下開始直播按鍵，它提示我系統升級維護中。我就乖乖的等了幾天，再次打開，仍然是升級維護中。 於是我找了客服，詢問是什麽升級維護。客服回答得含含糊糊，口齒不清，就是一股不想回答的氣息，氣得我反向抽烟燙到自己嘴巴。我放下這個事情，把心思擺回到工作學習上。慢慢忘了這檔子事情。 三個月後，開始看vtuber。那時候已經是9102年，vtuber也時不時會在b站做做b限。在dd的途中，我突然又想起來關於我直播間的那檔事情。再去開了一下，依然是系統升級維護中。這時候我感到事情并不簡單。 質問了一輪客服，問了問不同的大佬，大概瞭解到是部分海外人士在b站直播的時候提及敏感話題（就是台灣香港南北韓兩伊印度新疆西藏balabala），導致只有b站做了這種一刀切的劣質處理。本來作爲一個剛剛起步的小公司，一刀切一段時間整頓這個玩意也是無可厚非，畢竟是在中國大陸做生意，有些規則確實需要遵循。我心想沒準過多幾個月就能研討出整套的解決方案了吧。 於是到了2019年年尾，我想給群友演示編曲和游戲的時候，感覺qq的直播極爲弱智，突然又回想到了b站的事情。再上去一看，仍然是系統升級維護中。 成，那我自己看看你到底在維護什麽。 身份認同與身份證明香港居民不配當中國人，全中國的互聯網公司都是這麽定義的。現在，港臺居民注冊b站想要“開通直播功能”，据b站官方所稱需要拍護照或者回鄉證進行實名認證。實際上，我早在2016年已經完成實名認證，2017年也確實可以正常直播，但到了2018年，這個條款説明也沒有變更，不過我就是無法正常開啓直播功能了。 据不同的消息來源所稱，現在免報備直播主要受到以下兩點限制： 僅允許大陸IP進行免報備直播 僅允許大陸居民身份證實名認證用戶進行免報備直播 報備：向b站官方進行活動審核，以進行直播 據我所知，無大陸居民身份證實名認證的賬戶無論是否大陸IP與是否報備，一般都不會允許進行直播。也就是説，在B站現今實際情況下，港澳臺與海外用戶是無法通過正常的手段進行個人直播的。而且，包括港澳臺和海外用戶，所有的實名認證操作均不可逆不可更改。 在B站，你想自由的直播，需要僞裝成一個住在大陸的大陸人。 手段進入正篇。 第一個問題： 僅允許大陸IP進行免報備直播。解決方法其實挺簡單明瞭。只需要在大陸購置一臺vps架設代理服務器便解決了問題。 不過，畢竟只有直播軟件和瀏覽器會受到b站的ip審查，如果通過普通的代理方法，要麽只能代理瀏覽器，要麽就是全局代理。這個情況和大陸居民翻出來YouTube進行直播的情況是極爲類似的。我在這裏使用了以下兩個工具： SSR-win：將SSR協議轉換爲HTTP協議。 Proxifier：為不同的軟件配置不同的網路方案，這軟件支持HTTP代理協議。 Proxifier的教程不少，如果有一點點代理相關知識的人應該知道代理實際上就是讓你的代理服務器成爲你的軟件請求的代理人。我們只需要把OBS以及一個專門用來訪問B站的瀏覽器（例如Firefox）代理到大陸，別的軟件不需要回國。具體的教程網上很多，這裏不過多贅述，僅僅提一點。 規則設置中，OBS安裝目錄下的所有exe麻煩全部勾上去，完成後，方案下被代理的軟件列表應如下： 1obs64.exe; obs-ffmpeg-mux.exe; obs-browser-page.exe; vlc.exe; node.exe 再提一個比較重要的事情。大陸的Vps服務器近兩年價格愈加嚇人，一般的1M VPS月租都要六七十塊錢，3M帶寬的甚至需要上三四百塊錢的月租，所以現在可能有許多人會選擇NAT VPS。 但要注意，NAT VPS在不同的綫路下的表現差距特別大。一般來説，接近上海和深圳這兩個出口點的服務器都會比較優質，電信的出口綫路質量一般都比另外兩大運營商要優秀。如果你和我一樣在香港，便宜的NAT VPS服務器裏可能只有東莞的VPS可以選擇。深圳地價高沒什麽小廠商會去開機房，大部分機房都在江蘇安徽浙江一帶，那一帶的對外綫路質量又參差不齊。具體可以上網查找別人關於翻墻中轉NAT VPS的選擇心得。 第二點，或許有兩個方法。 第一個方法，也是我本人用的方法，就是請求信任的人幫忙認證，注冊新的賬號，成爲你在B站上的靈魂。這個方法簡單且快捷，但是實行起來卻會有不少疑慮和擔心。而且，如果是特純種香港人台灣人，和大陸聯係不多，這個方法更是比較難適用。 第二個方法，就是返回大陸申請居住證，用居住證進行實名認證。這個方法我沒有實證過，關於如何申請居住證以及有什麽條件，我也沒有實際操作過。這裏僅僅是提出一種可能性。（但僅僅爲了閑暇時間直播而申請居住證，未免太大費周章） 怠惰總而言之，B站作爲一個互聯網公司，坐擁全國最多的綜合視頻流量，身爲全國綜合視頻和直播的壟斷龍頭，理應有相應的執行力和技術能力解決政治言論上的杯葛。即便是報備，也可以將報備流程做的系統化和程序化，在網頁上實現類似視頻和封面審核的報備流程。但是這并沒有發生，實際原因爲何，也不得而知，只能任我們猜想。]]></content>
      <categories>
        <category>生活心得</category>
      </categories>
      <tags>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[manjaro的KDE安裝包之默認密碼]]></title>
    <url>%2F2019%2F11%2F10%2Fmanjaro_kde_passwd%2F</url>
    <content type="text"><![CDATA[manjaro安裝過程中會自動鎖屏，而且系統自帶密碼，manjaro賬戶的默認密碼為manjaro。]]></content>
      <categories>
        <category>技術相關</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RSA非對稱加密算法學習筆記]]></title>
    <url>%2F2019%2F11%2F10%2Fstudy_of_rsa%2F</url>
    <content type="text"><![CDATA[這是啥RSA算法是一種非對稱加密算法，他的原理完全基於歐拉定理，而歐拉定理基於歐拉函數……歐拉函數基於互質……互質則確定了兩個數字之間的唯一性…… 123歐拉函數：φ(n) = n-1歐拉定理：如果兩個正整數a和n互質，則n的歐拉函數 φ(n) 可以讓下面的等式成立：a^φ(n)%n=1其中%是取餘數之含義]]></content>
      <categories>
        <category>技術相關</category>
      </categories>
      <tags>
        <tag>學習筆記</tag>
        <tag>加密</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用Windows版本的dd工具]]></title>
    <url>%2F2019%2F11%2F09%2FUsege_dd_for_windows%2F</url>
    <content type="text"><![CDATA[Windows版本的dd與Linux / macOS下的差異不大，只不過驅動器名稱相當的詭異。在windows下，dd命令使用以下標識來代表驅動器 1\\.\a: #a代表盤符 將1.img刻入e盤即為 1dd.exe if=1.img of=\\.\e]]></content>
      <categories>
        <category>技術相關</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[系統學習框架 —— 如何開始學習完全不懂的一樣學科]]></title>
    <url>%2F2019%2F10%2F27%2FStudying_system_theory%2F</url>
    <content type="text"><![CDATA[任何的學習都需要一定的耐心、通過不斷的實踐纍積經驗。不過，“學習”具體是什麽，我們是如何學習的？老師是如何教導我們知識的？ 基礎的要素任何的學習都需要瞭解以下幾個學科要素 術語：任何理論都需要一套術語對學科内發生的現象進行描述或總結，方便邏輯思考。 舉例而言，音樂中的CDEFGAB七個音的名稱是用於描述7個音高的，拍子數是用於描述音之間的時間關係的。 思維模式：任意的理論]]></content>
      <categories>
        <category>生活心得</category>
      </categories>
      <tags>
        <tag>學習</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[時間管理（三） —— 初步實踐：拆分一首曲子的創作流程]]></title>
    <url>%2F2019%2F08%2F24%2FMISSION_MANAGEMENT_3%2F</url>
    <content type="text"><![CDATA[上一篇討論了如何將需要連續進行的事情拆分爲小事件。 先開坑，之後有空補上。]]></content>
      <categories>
        <category>生活心得</category>
      </categories>
      <tags>
        <tag>時間管理</tag>
        <tag>事項</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[時間管理（二） —— 利用間隙時間慢慢完成麻煩的事情]]></title>
    <url>%2F2019%2F08%2F23%2FMISSION_MANAGEMENT_2%2F</url>
    <content type="text"><![CDATA[前言生活中經常遇到步驟復雜，麻煩但是影響又很深遠的事情。 這類事情都是看起來需要花很長時間處理的事情，而且看起來很有用，但是短時間內不會有任何收益的事情。結果經常拖到死線前才開始急急忙忙糊弄過去，弄得質量不佳之餘很是狼狽。 即便是學習，都算是長周期的事情：每次聽課都需要做筆記，做完筆記之後可能需要整理，整理後需要復習，在考試前都需要拿出相關的筆記。 既然如此，爲什麼不在一開始寫好這類經常出現的事情的「處理事項列表」，每個事情拆解成五分鍾內能夠完成的小事項，一有空閒就完成一點呢？ 先決條件 你有經常翻看的筆記軟件、日程軟件、筆記本、甚至是手機桌面等等界面 你需要能夠控制這些軟件/界面上面顯示什麼內容 如果沒有，便想辦法養成一個查看這些界面的習慣 推薦使用Google Keep、Google now、iPhone主頁面左方信息菜單等 你想處理的事項是非絕對連續性的（例如睡眠便是連續事項——對於一些人來說是麻煩事情，且對於大多數人來說都是絕對連續的事項） 拆分先思索你想要做的事情可否拆分爲細節事項，例如上課做了3頁的筆記，筆記需要整理，然後在適當時候拿出來復習，鞏固知識。 首先我們要搞懂，這個筆記是有助於我們達成目標的，例如你想達成考高分的目標，於是你就需要在筆記中找出與考點相符合的知識，並在適當時候溫習 這就形成了一個粗略的流程，將這個流程細化，大概可以變成以下小事項。 閱讀考題大綱 分層劃段，理解有多少事情要處理 提取每個句子的關鍵詞 每一段都是一個小任務（有段落數量個事情要處理） 找出每一段的重點 每一段都是一個小任務（有段落數量個事情要處理） 閱讀筆記內容 分層劃段，理解有多少事情要處理 提取每個句子的關鍵詞 每一段都是一個小任務（有段落數量個事情要處理） 找出每一段的重點 每一段都是一個小任務（有段落數量個事情要處理） 匹配考題內容和筆記內容 一般有效的課程做出來的筆記是完全吻合考題，可以拿着筆記重點來匹配考題大綱並回答相關問題（每一段都是一個小任務）（有段落數量個事情要處理） 溫習 將匹配完畢的內容設定定時提醒來翻看，或者直接擺在經常翻看的面板上（例如手機桌面），增強記憶 可以看到，1只需要執行一次，2、3都是經常性重復的內容，而4是整個流程最關鍵的部分，就是將資訊真正活用化。 而且這個流程中，所有的事項都被拆分爲了五分鍾內可以完成的事項，分層劃段、提取每個段落中每個句子的關鍵詞，再總結出每個段落的重點。這種將復雜問題拆分爲簡單問題的方法可以極大降低執行者的焦慮，讓事情看起來易於達成且容易分配。 執行我建議使用Google Keep+Google Docs或evernote，或者別的你認爲合適的，帶有鏈接功能與選項框功能的筆記便籤軟件，或者是實體筆記本。 將以上設計好的流程原封不動地放入筆記中，作爲之後的指引 將每次啓動專案不會重復的部分新建爲獨立一個頁面，例如上方就是閱讀考綱部分。把大的事項分爲一個個小事項。 一開始接觸某一個事項時候，應該先了解「我該做多少事情」，然後就可以將事項一點一點完成了。 將啓動專案後會多次重復執行的部分新建爲一個模板頁面，每次有新的「筆記」進入專案，便復制一次用於這個新的任務 例如每次有筆記入手時候，就復制一次「筆記處理流程」，然後在之後搭車、等人或者別的碎片時間一點一點完成他。 這時候可以將完成任務所需要的信息也插入到筆記，便於隨時隨地處理事項 將關鍵性事項以需要的形式插入合適的工具 例如我需要在下個月某一日晚上八點前往某個酒店的禮堂進行演講，就用鬧鍾軟件設定6點鍾提醒我前往酒店。 例如我想盡可能的多復習以上專案整理下來的東西，就把它設置成屏保壁紙。 未來重啓整個專案的時候，你已經有一套系統、直觀的方案來應對，並且可以很好的把這些事項插入到自己的生活中，便能很好的消除應對這些事情的焦慮感 如何開始現在我們知道方法了，但是要怎麼開始這個處理流程呢？ 我的建議是，一開始不要使用這個流程，而是開始持續寫日記。好好搞清楚自己到底需要做什麼，做了什麼，然後嘗試拆分需要做的、未來有可能做的、自己想做的事情。 拆分的時候要確保每一個事項都是絕對清晰，只包含動作和信息，有一個很明確的結果狀態，這樣能夠明確自己的任務，達成結果，而不會一味迷失在目標之中。 拆分完畢後，設想把自己拆分的事項插入到等車的時間、等待上課的時間、下班前的五分鍾、午休吃完飯休息的五分鍾、課間五分鍾，保證事項並非高壓、繁復、不明確的。最好以過去的自己作爲參照，想象過去的自己在間隙時候有沒有可能做完這件事項 希望大家可以透過這個方法做到更多想做的事情閱讀更多前篇文章：時間管理（一） —— 應該怎麼在爆炸的事項中開心生存]]></content>
      <categories>
        <category>生活心得</category>
      </categories>
      <tags>
        <tag>時間管理</tag>
        <tag>學習經驗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo學習筆記 —— 多端同步、Github Pages部署、更改主題、評論功能（四）]]></title>
    <url>%2F2019%2F08%2F22%2FHEXO_STUDY_4%2F</url>
    <content type="text"><![CDATA[關於多端同步依然還有一些東西可以略微分享。我們可以使用Github的webhook功能，對儲存源碼和文章md文件的repo進行pull操作后，自動將網頁輸出然後push到博客端。 講實話，這玩意真的挺麻煩，我折騰了特別久，結果還是最最最簡單的辦法：http訪問就推送，最爲方便。 在VPS上安裝hexo的運行環境這方面已經在第一篇文章詳細講過，無非就是安裝nodejs, hexo-cli等等。 這裏不重複闡述 給VPS設置在Github上的通用SSH授權輸入以下代碼創建一個ssh key 1ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 然後複製~/.ssh/id_rsa.pub文件内的所有内容，打開github的setting中的SSH and GPG keys 添加SSH Key即可 在VPS上克隆自己創建的庫在第二篇文章中我們創建了一個同步庫，裏面存放著hexo的源碼，用來進行多端同步。現在將他克隆到vps上 123456mkdir autocd autogit clone git@github.com:yourname/blog.gitcd blognpm installgit pull 然後安裝pm2管理後臺應用 1npm install -g pm2 之後，在本地創建一個deploy.js，用nodejs寫一個監聽http請求的脚本 1234567891011var http = require('http');var port = 3000; //監聽端口var command = 'sh ./deploy.sh' //運行指令http.createServer(function(req, res)&#123; res.writeHead(200, &#123;'content-type': 'text/plain'&#125;); deploy = require('child_process').exec(command,&#123;&#125;,function(err,stdout,stderr)&#123; console.log('deploy.') &#125;); res.end('It works');&#125;).listen(port); 再創建一個deploy.sh進行pull和hexo g -d操作。 1234#!/bin/bashgit pullhexo cleanhexo g -d 這時候監聽服務應該可以運作了。先在別的設備更改一下hexo源碼並push到github，然後試著運行以下代碼。 1node ./deploy.js 訪問vps的http://ip:3000。若你的ip為100.100.100.100，則訪問http://100.100.100.100:3000，不出意外網頁會返回It works，vps控制臺會輸出deploy. 按下Ctrl+C關閉node，輸入pm2 start deploy.js將服務運行在後臺，然後開始配置github Github端的配置進入你的同步代碼倉庫，點擊上方的Setting。 然後點擊左方的Webhooks，添加新的webhook 進入后， 在Payload URL中填入你剛剛訪問的網址（包括端口） 直接點擊Add webhook。 然後使用另一臺機器，更改一下你的文章，將blog文件夾更新到github，觀察博客頁面有沒有變化。]]></content>
      <categories>
        <category>技術相關</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[時間管理（一） —— 應該怎麼在爆炸的事項中開心生存]]></title>
    <url>%2F2019%2F08%2F21%2FMISSION_MANAGEMENT_1%2F</url>
    <content type="text"><![CDATA[閱讀這篇文章所得的心得 目標與任務 目標是可量化的一個指標，表示未來將會透過某種方式達成這個指標 任務是可做到的某個動作，表示自己將會在某個時間進行此項動作 合適的時間管理不可以將達成後的目標和自己應該要做的任務混淆，否則會徒增迷惑。 周/日 目標法 每晚列出明天的任務清單，其中的代辦事項均來自於本周的清單 當完成清單後，任務便結束，絕不增加任何額外的任務 等到一周結束的時候，準備下一周的任務清單 任務清單的注意事項 每日、每周只列出有限的、明確的任務數量 把重心放在完成任務上，而不是一味的提高質量 掌握工作強度後，漸漸提高工作量，但要確保可以完成，絕不產生拖延 可以建立一個「彈性清單」，新添加任務的時候以此爲測試 在完成工作後，充分放鬆與休息 精力管理精力分爲以下幾種類型，並以以下方式保持充沛精力 體力 科學飲食、睡眠與鍛煉 動力 對工作成果的渴望 工作成果對自己的激勵 e.g. 整潔有序的工作環境 可以增強自尊感的工作目標 創造力 來源於大量的、廣泛的多方面閱讀 頭腦風暴 邏輯批判 目標分類 人生目標：對未來影響超過五年的 發展目標：對未來影響超過六個月的 即時目標：對未來影響短過六個月的 若爲了生存，側重點應該放在即時目標；若生存已經不是主要問題，那就將側重點放在1、2類 關於對項目的取舍 當項目與目標背離時，舍棄。 當任務與任意項目無聯系時候（孤兒任務） 少投入，或 舍棄 應該注意的雜項 設定起始與結束時間，忽略工作時長 避免僞工作：查收郵件，無目的瀏覽網頁 專心做、盡情玩。 保持人際聯系，明確表達自己什麼時候有空沒空 對於上網 做明確具體的事情 e.g. 固定時間查郵件 固定更新博客/信息 固定時間檢查聊天軟件/微博/推特 有意識的進行網絡齋戒 工具 日程本 清單軟件 GTD相關軟件 想說的話寫博客也是因爲自己沒法好好整理自己的知識，平時和別人分享心得也無從下手。 我因應自己的興趣略微研究了一段時間音樂，從小也對信息科技相關的知識十分感興趣。直到現在，除了用Excel做一份賬單，其他的信息處理方法我都相當的生疏。 前段時間試着教給別人識別吉他上面的音與鋼琴上面的音之間的對應關系，就這麼簡單的一個知識點，因爲我長期沒有整理自己的腦袋，足足教了半個多小時，這時候才發現自己的表達能力因爲長期停止寫作而退化到幾乎要不如小學生的階段。 閱讀過的書籍前段時間依然會使用紙筆寫下自己的心得，看過的動畫也會分享自己的感動之處。前不久依然會認認真真在聽完一首值得認真分析評論的歌之後，用記事本慢慢敲下和弦進行、表達方法相對應的情感等等信息。 畢業之後除了荒廢自我，每天除了上班下班以外幾乎都不想去整理自己，搞清楚自己究竟在做什麼了，直到我看到有同學畢業沒多久便達成了多項目標，終於醒了過來。 管理自己的行爲，管理自己的知識與管理自己的財富，才能活得令自己滿意。 共勉！後篇文章：時間管理（二） —— 利用間隙時間慢慢完成麻煩的事情]]></content>
      <categories>
        <category>生活心得</category>
      </categories>
      <tags>
        <tag>時間管理</tag>
        <tag>事項</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[讓Markdown文檔一秒轉換為Keynote演示文檔 —— md2key學習筆記]]></title>
    <url>%2F2019%2F08%2F21%2F%E8%AE%93Markdown%E6%96%87%E6%AA%94%E4%B8%80%E7%A7%92%E8%BD%89%E6%8F%9B%E7%82%BAKeynote%E6%BC%94%E7%A4%BA%E6%96%87%E6%AA%94%20%E2%80%94%E2%80%94%20md2key%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%2F</url>
    <content type="text"><![CDATA[引言Keynote是一個蘋果自家的演示文檔軟件，有許多強大的預設，動畫效果十分驚人md2key是一個讓Markdown格式的文檔轉換為Keynote文檔的工具，由k0kubun開發維護GitHub主頁 安裝12# 僅限macOS用戶gem install md2key 使用方法 創建一個Keynote文檔 添加一張你想要的樣式幻燈片作為封面，然後把第一張幻燈片刪除 創建第二張幻燈片，這張幻燈片的樣式作為內頁 保持文檔開啟，在終端直接輸入md2key markdown.md 進階用法 點擊右方的“編輯母版幻燈片” 在Keynote中給任何你將會用到的母版幻燈片命名為“cover”“h1”“h2”⋯⋯“h5” cover對應第一段“#”，第一個#之後的文字會印刷在封面頁，h1對應一個#，h2對應兩個#⋯⋯ 例如： 12345678910# The presentation@k0kubun## Hello worldI'm takashi kokubun- This is a pen- Nested item is available## How are you?- I'm fine thank you]]></content>
      <categories>
        <category>技術相關</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Keynote</tag>
        <tag>PPT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo學習筆記 —— 多端同步、Github Pages部署、更改主題、評論功能（三）]]></title>
    <url>%2F2019%2F08%2F20%2FHEXO_STUDY_3%2F</url>
    <content type="text"><![CDATA[主題 —— NexT進入hexo目錄，然後下載主題 12$ cd hexo$ git clone https://github.com/theme-next/hexo-theme-next themes/next 編輯hexo目錄下的_config.yml，把主題改成改成theme: next。 然後編輯theme/next/_config.yml 搜索schemes關鍵詞，將scheme: Gemini前的#號去掉，然後注釋掉默認的scheme: Muse 運行以下命令更新主題（若你有根據上一篇編寫push腳本） 1./push 評論Hexo是一個靜態博客生成工具，生成的頁面僅有展示功能，而沒有提交功能。 以下內容參考 https://www.jianshu.com/p/d68de067ea74 如果需要實現評論，Hexo是沒法接收網頁傳來的表單信息的,則需要借助相關的服務。這裏使用的是Disqus 進入官方站點注冊後登錄，點擊GET START，然後按下下圖所示按鈕]]></content>
      <categories>
        <category>技術相關</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo學習筆記 —— 多端同步、Github Pages部署、更改主題、評論功能（二）]]></title>
    <url>%2F2019%2F08%2F20%2FHEXO_STUDY_2%2F</url>
    <content type="text"><![CDATA[同步多端……真正麻煩的事情來了根據剛剛提到的文件目錄結構 12345678|-- _config.yml #配置文件|-- package.json #hexo的依賴，插件信息也保存在這文件內|-- scaffolds #標準模板，一般不需要關心|-- source #資源目錄，文章與各種附件也都保存在這 |-- _posts #文章文件夾|-- themes #主題|-- .gitignore #git同步的時候忽略的目錄與文件|-- public #生成後的靜態博客文件夾 有同步意義的是_config.yml, package.json, source/, themes 最重要的是source文件夾，裏面包含了可以引用的圖片、文章文件以及各種附加的小附件。 Google Drive, 百度網盤, Dropbox等同步網盤使用Google Drive一類簡單粗暴的多端同步網盤來同步我們的hexo文檔和配置，缺點就是node相關的文件也都會一並同步，好處就是特別省事。 直接將整個目錄復制到Google Drive即可，之後所有操作都在掛載後的Google Drive裏面進行。 在另外一臺機器，安裝Google Drive同步程序，然後將hexo目錄設置爲同步以及離線可用，之後整個Hexo端便會一直保持着最新的文件。 其他網盤同理 Github同步這個方案配置比較麻煩，但是後期使用問題較少，挺多大佬也是使用這個方案進行多端同步 以下是步驟 先在Github建立一個私人庫，專門存放Hexo部署程序 在Hexo的目錄下，運行git init 修改.gitignore爲以下內容 1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ 執行以下代碼，進行第一次推送代碼 1234git add .git commit -m "first commit"git remote add origin git@github.com:username/library.gitgit push -u origin master 創建一個名爲push的文件，將以下代碼輸入進去 12345#!/bin/bashgit add .git commit -m `date +%Y-%m-%d-%H%M`git push origin masterhexo g -d 輸入chmod +x push，給腳本增加運行權限 輸入./push嘗試推送 之後，新的機器先安裝Hexo，再輸入git clone git@github.com:username/library.git，再進入克隆目錄內，輸入npm install安裝依賴即可。 每次編輯完文章，輸入./push推送，換到另一臺電腦想繼續編輯時，輸入git pull拉取最新檔案下來即可。 2019-08-22更新 如果你有自己的VPS服務器，可以使用github的webhook功能進行自動更新，具體可以查看這篇文章 需要將push文件修改成以下内容才能使用webhook自動更新網頁端 1234#!/bin/bashgit add .git commit -m `date +%Y-%m-%d-%H%M`git push origin master]]></content>
      <categories>
        <category>技術相關</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo學習筆記 —— 多端同步、Github Pages部署、更改主題、評論功能（一）]]></title>
    <url>%2F2019%2F08%2F20%2FHEXO_STUDY_1%2F</url>
    <content type="text"><![CDATA[舊的博客是用Typecho做的，什麼都挺好，就是這個博客沒法直接上載.md文件，備份也顯得挺麻煩。 在15年的時候嘗試搭建Hexo博客，那時候的Hexo的配置流程比現在復雜特別多。現在比之前方便多了，想着要不要遷移到Hexo。 基本了解Hexo主要由三個部分組成 生成端 生成更新後的博客靜態頁面 推送端 負責把靜態頁面推送到網頁 網頁端 提供網頁瀏覽服務 一般生成端和推送端整合在一起，網頁端獨立部署在虛擬主機或者Github Pages、Coding Pages上。但是文章內容都是保存在生成端的source/_posts，要是換一臺機子就沒法同步文章，也沒法推送文章。 安裝hexo首先需要安裝nodejs與npm，在官網上也有不同系統使用包管理器安裝的指引 1234567891011# Using Ubuntucurl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -sudo apt-get install -y nodejs# Using Debian, as rootcurl -sL https://deb.nodesource.com/setup_12.x | bash -apt-get install -y nodejs# Using RHEL, CentOS, CloudLinux and Fedora, as rootcurl -sL https://rpm.nodesource.com/setup_12.x | bash - 安裝完nodejs之後使用node -v與npm -v查看nodejs與npm的版本。可以使用npm install npm進行升級，然後使用npm安裝hexo。 12345678mkdir blog &amp;&amp; cd blognpm install -g hexo-clihexo init #初始化hexo#輸入以下命令檢查網站雛形hexo new testhexo g #構建靜態頁面hexo s #開啓服務器 完成之後在瀏覽器輸入網址localhost:4000。應該會看到生成的test頁面和hello world頁面。 hexo的目錄結構如下 12345678|-- _config.yml #配置文件|-- package.json #hexo的依賴，插件信息也保存在這文件內|-- scaffolds #標準模板，一般不需要關心|-- source #資源目錄，文章與各種附件也都保存在這 |-- _posts #文章文件夾|-- themes #主題|-- .gitignore #git同步的時候忽略的目錄與文件|-- public #生成後的靜態博客文件夾 常用的命令有以下幾條 123456789101112131415npm install hexo -g #安装Hexonpm update hexo -g #升级hexo init #初始化博客#命令简写hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo g == hexo generate #生成hexo s == hexo server #啓動伺服器hexo d == hexo deploy #推送部署hexo server #Hexo監視文件變動並自動更新，無需重啓服務器hexo server -s #靜態模式，只監視public文件夾下的內容hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定義 IPhexo clean #清除緩存 而_posts內.md文件的文章大致結構如下 12345678910---title: [標題]date: [YYYY-MM-DD HH：MM：SS]tags:- [tag1]- [tag2]- [tag3]categories: [分類]---[文章內容] 推送網站剛剛介紹文件目錄結構提到有一個_config.yml配置文件，使用atom或你喜歡的編輯器打開這個文件，在最後幾行會看到以下字樣 123deploy: type: #推送類型 repo: 這個就是hexo自帶的網站推送功能的配置行，這次我使用Github中自帶的Github Pages當作網頁端，而這需要安裝hexo的git推送插件 1npm install hexo-deployer-git --save 然後修改_config.yml 1234deploy: type: git repo: yourname.github.com branch: master 可以看這裏查看如何配置Github以實現二級域名訪問 其他的部署渠道可以在這裏查看如何部署 修改完_config.yml後，分別輸入以下三條命令 123hexo cleanhexo ghexo d 然後你的第一次部署便完成了。訪問 yourname.github.com，應該可以看到你部署的hexo博客了。 接下來要處理的是如何同步多端。]]></content>
      <categories>
        <category>技術相關</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Proxmox中安裝macOS Mojave並設置直通顯卡]]></title>
    <url>%2F2019%2F08%2F20%2F%E5%9C%A8Proxmox%E4%B8%AD%E5%AE%89%E8%A3%9DmacOS%20Mojave%E4%B8%A6%E8%A8%AD%E7%BD%AE%E7%9B%B4%E9%80%9A%E9%A1%AF%E5%8D%A1%2F</url>
    <content type="text"><![CDATA[在PVE中安裝macOS Mojave並設置直通顯卡先決條件： 8G或以上內存 支持虛擬化以及SSE4.2的cpu 包括AMD與INTEL 1 安裝PVE安裝教程此處安裝方法與一般的方法相同，推薦將pve系統安裝到usb設備 2 創建macos安裝鏡像在linux或macos系統下運行以下命令 123wget https://raw.githubusercontent.com/thenickdude/OSX-KVM/master/fetch-macOS.pychmod +x fetch-macOS.py./fetch-macOS.py 在選單中選擇最新的iso，等待下載完成後，運行以下命令，將dmg包轉換成iso包 12345678# 安裝dmg2img 若你是deb包管理系以外的系統，可以自行查找如何安裝dmg2imgapt-get install dmg2img -y# 利用dmg2img將基本系統dmg鏡像轉為iso鏡像dmg2img BaseSystem.dmg Mojave-installer.iso# 若你是macOS，請使用以下命令hdiutil convert BaseSystem.dmg -format RdWr -o Mojave-installer.isomv Mojave-installer.iso.img Mojave-installer.iso 然後下載Clover 123456# Ubuntu &amp; Debianapt-get install unzip -y# Centos &amp; RHELyum install unzip -y# 取得cloverwget https://github.com/thenickdude/OSX-KVM/releases/download/clover-r4920/clover-r4920.iso.zip &amp;&amp; unzip clover-r4920.iso.zip 然後將clover-r4920.iso與Mojave-installer.iso上傳到PVE中 3 在網頁中創建虛擬機 OS頁面選擇Clover ISO進行引導 系統選擇其他（other） System頁面的顯示卡選擇VMware兼容 BIOS選擇OVMF Machine選擇q35 硬盤選擇SATA，緩存設置成Write back（不安全） CPU的類型設置成Penryn 網卡設置成Vmware vmxnet3 點開虛擬機的硬件選項卡，添加Mojave-installer.iso，選擇ide通道的cd-ram 先不要啟動虛擬機，在ssh中打開/etc/pve/qemu-server/你的VMID.conf 1nano /etc/pve/qemu-server/你的VMID.conf 然後輸入以下代碼 1args: -device isa-applesmc,osk=&quot;ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc&quot; -smbios type=2 -cpu Penryn,kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,+pcid,+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check -device usb-kbd,bus=ehci.0,port=2 將兩個驅動器的配置中的cdrom刪除，加入cache=unsafe最後的文檔應該看起來像這樣 1234567891011121314151617181920args: -device isa-applesmc,osk=&quot;ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc&quot; -smbios type=2 -cpu Penryn,kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,+pcid,+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check -device usb-kbd,bus=ehci.0,port=2balloon: 0bios: ovmfboot: cdnbootdisk: ide2cores: 4cpu: Penrynefidisk0: vms:vm-144-disk-1,size=128Kide0: isos:iso/Mojave.iso,cache=unsafeide2: isos:iso/clover-r4920.iso,cache=unsafemachine: q35memory: 8192name: mojavenet0: vmxnet3=xx:xx:xx:xx:xx:xx,bridge=vmbr0,firewall=1numa: 0ostype: othersata0: vms:vm-144-disk-0,cache=unsafe,size=64Gsmbios1: uuid=xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxsockets: 1vga: vmware 設置完畢後，根據patch-ovmf-to-support-macos-in-proxmox-5-1 來安裝OVMF庫 For PVE 6 123456789101112131415161718192021# Add missing localeecho &quot;en_US.UTF-8 UTF-8&quot; &gt;&gt; /etc/locale.genlocale-genexport LC_ALL=en_US.UTF-8# Add tools and build dependencies:apt updateapt install build-essential git lintian debhelper iasl nasm \ python uuid-dev gcc-aarch64-linux-gnu bc python3-distutils -y# Clone my patched sourcegit clone -b macos-support-proxmox-6.0 https://github.com/thenickdude/pve-edk2-firmware.git# Build itcd pve-edk2-firmwaremakedpkg -i pve-edk2-firmware_*.deb# Prevent it from being replaced later by apt upgrade:apt-mark hold pve-edk2-firmware 4 設置直通首先，編輯grubvim /etc/default/grub將GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;改為GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet intel_iommu=on video=efifb:off&quot;（若是amd則改為amd_iommu=on） 執行update-grub命令更新grub信息最後輸入dmesg | grep -e DMAR -e IOMMU命令檢查是否有錯然後編輯/etc/modules nano /etc/modules在最尾加入以下四行 1234vfiovfio_iommu_type1vfio_pcivfio_virqfd 再次輸入dmesg | grep ecap命令檢查設備是否支持iommu然後執行以下命令將驅動加入黑名單 123echo &quot;blacklist radeon&quot; &gt;&gt; /etc/modprobe.d/blacklist.confecho &quot;blacklist nouveau&quot; &gt;&gt; /etc/modprobe.d/blacklist.confecho &quot;blacklist nvidia&quot; &gt;&gt; /etc/modprobe.d/blacklist.conf 執行update-initramfs -u命令更新信息執行lspci，找出顯卡的代號（例如01：00），然後執行lspci -n -s 01:00得到類似以下的輸出 1201:00.0 0300: 10de:1d01 (rev a1)01:00.1 0403: 10de:0fb8 (rev a1) 其中10de:1d01與10de:0fb8是vendor IDs將vendor IDs指定到VFIO模塊 1echo &quot;options vfio-pci ids=10de:1d01,10de:0fb8&quot; &gt; /etc/modprobe.d/vfio.conf 進入web管理介面 在vm的硬件選項卡中編輯添加PCI設備 選定顯卡對應的01:00.0與01:00.1 在01:00.0（顯示設備）中勾選 PCI-Express All Functions 主GPU 檢查文件/etc/pve/qemu-server/YOUR-VM-ID.conf 確保01:00後的參數正確 e.g.hostpci0: 01:00,x-vga=1,pcie=1 然後，直通鼠標鍵盤到VM中，添加USB設備，選擇鼠標鍵盤，然後添加到VM 5 安裝Mojave現在啟動你的虛擬機，若你設置了直通，啟動的一瞬間會發生以下事情 連接在你顯卡的顯示器應該會從PVE的ttl介面變為黑屏，然後變成OVMF UEFI啟動介面。 你的鍵盤鼠標這時候也可以直接控制虛擬機。 在啟動的時候趕快按下F2以進入OVMF設置畫面。 進入Device Manager 選擇OVMF platform configuration 設置分辨率為1920x1080 保存設置 在根菜單下選擇Reset（不是continue） 然後你應該進入了Clover，接下來跟著指引安裝系統全部安裝完畢之後，再次啟動時 手動按下F2 選定Clover啟動項 然後才會看到磁盤內的Mac系統。進入Mac系統後，打開終端，輸入diskutil list以檢查設備然後輸入sudo dd if=&lt;Clover CD的EFI分區&gt; of=&lt;硬盤的EFI分區&gt;將Clover安裝到硬盤中 你也可以忽略這一步，將Clover CD永久掛載在虛擬機下 關機，移除CLover CD，從硬盤啟動。]]></content>
      <categories>
        <category>技術相關</category>
      </categories>
      <tags>
        <tag>Proxmox</tag>
        <tag>黑蘋果</tag>
        <tag>macOS</tag>
        <tag>直通</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安裝Proxmox VE]]></title>
    <url>%2F2019%2F08%2F20%2F%E5%AE%89%E8%A3%9DProxmox%20VE%2F</url>
    <content type="text"><![CDATA[先決條件 支持VT-d或AMD-V的CPU 8G或以上的可完全擦除磁盤，或8G以上的U盤用作Proxmox VE的系統盤 另外一隻2G以上的U盤 下載Proxmox VE的安裝鏡像官方載點 安裝過程將ISO文件寫入2G以上大小的U盤，製作啟動介質 12dd if=~/Downloads/Proxmox.iso of=/dev/sdx# Proxmox.iso是你下載的鏡像，而/dev/sdx是你的U盤設備（2G以上） 寫入完畢之後，輸入命令reboot重啟電腦 進入電腦UEFI設置介面，開啟VT-d或AMD-V，設置2G的閃存盤為首啟動項 若你使用8G以上的U盤作為系統盤，請在這個時候插入 保存UEFI設置，重啟電腦 啟動Proxmox VE安裝程序，選擇Install Proxmox VE，進入自檢畫面，等待數秒至數分鐘 同意協議，按“Agree” 選擇硬盤，請根據磁盤容量選擇正確的硬盤 Proxmox VE安裝不可以選擇安裝在某個硬盤的某個分區 一旦選擇安裝，便會重新分區整個硬盤，請準備可以完全擦除的磁盤設備 設定國家、時區與鍵盤，在Country輸入China、Taiwan或Hong Kong都會直接填充時區信息 設定管理員root帳號密碼郵箱 設定主機名、IP、網關、掩碼與DNS，設置完畢後點擊Next開始安裝 安裝完畢需要手動重啟，點擊右下角Reboot重啟 Proxmox VE會在啟動後於主機的ttl控制台中顯示Web控制台的URL，此URL只接受HTTPS使用安裝的時候設置的root帳戶密碼，登入網頁端，顯示Proxmox VE的網頁控制台。]]></content>
      <categories>
        <category>技術相關</category>
      </categories>
      <tags>
        <tag>Proxmox</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[實現家庭綜合服務器——給Proxmox VE中的Win10直通顯卡]]></title>
    <url>%2F2019%2F08%2F20%2F%E5%AF%A6%E7%8F%BE%E5%AE%B6%E5%BA%AD%E7%B6%9C%E5%90%88%E6%9C%8D%E5%8B%99%E5%99%A8%E2%80%94%E2%80%94%E7%B5%A6Proxmox%20VE%E4%B8%AD%E7%9A%84Win10%E7%9B%B4%E9%80%9A%E9%A1%AF%E5%8D%A1%2F</url>
    <content type="text"><![CDATA[前情提要話説我弟最近上中學，他開始需要使用電腦做學校的課業，而我家裏有一臺chromebook、台機和一臺特別破舊的超極本。 超極本的發熱已經接近70度，可以把人手烤焦，chromebook的系統不支援他學校的CD軟體，而我的臺機，有太多的不可見人的東西，更是不能給他使用。 但是教育乃一切之本，他的生日也臨近，想給他送個禮物，於是看到了我家不斷跑著OVM、ikuai、web-server和域名ddns的伺服器，突然覺得，可以壓縮一下前面幾個服務的性能，給他搭建一個能用的電腦操作平臺。 大致的想法就是買個基礎顯卡，買個固態硬盤直通到虛擬機，然後直通USB口，把這些綫捆成一坨拉到他的房間，給他個電腦屏幕和鍵盤。 我還想把成本控制在1000塊錢以内來著 原有機件介紹服務器是一臺大致如下配置的服務器 配件 型號 已用 主板 B75 / SATA口 2*3.0+4*2.0 已用3 PCI-E插槽 2条PCI-E*16 已用一條用於網卡 CPU i5-3330 虛擬機1+1+4+4+2 RAM 8G*2 DDR3 1600 已用512M*3+1.5G+2G=5G 可以看到CPU部分略微吃緊，而RAM依然有機會分配8G給虛擬機使用，PCI-E插槽可以容納一張獨立顯卡，硬盤也可以插多一張SSD。 找時間把各種吃CPU的服務搬出伺服器為上策。 需要添置的硬件由於我是要給現有的伺服器增加一個Win10，並給他加上顯卡與硬盤等等外設，還要讓他可以在遠處傳輸，於是這需要以下配件。 配件 名稱 價格 顯卡 RX550 2G半高顯卡 333港幣 硬盤 240G臺電SSD 210港幣 USB延長綫 / 142港幣 HDMI延長綫 / 128港幣 總價 814港幣 總而言之價格是控制在了1000港幣以内，算是完成目标。 等到我有空，買完所有需要的配件就開搞]]></content>
      <categories>
        <category>技術相關</category>
      </categories>
      <tags>
        <tag>Proxmox</tag>
        <tag>直通</tag>
      </tags>
  </entry>
</search>
