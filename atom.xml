<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木不子的窒息小茶室</title>
  
  <subtitle>技術、音樂、影視、動畫的茶室</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cupkappu.github.io/"/>
  <updated>2019-08-22T09:51:54.533Z</updated>
  <id>https://cupkappu.github.io/</id>
  
  <author>
    <name>木不子</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo學習筆記 —— 多端同步、Github Pages部署、更改主題、評論功能（四）</title>
    <link href="https://cupkappu.github.io/2019/08/22/HEXO_STUDY_4/"/>
    <id>https://cupkappu.github.io/2019/08/22/HEXO_STUDY_4/</id>
    <published>2019-08-22T08:42:18.000Z</published>
    <updated>2019-08-22T09:51:54.533Z</updated>
    
    <content type="html"><![CDATA[<p>關於多端同步依然還有一些東西可以略微分享。我們可以使用Github的webhook功能，對儲存源碼和文章md文件的repo進行pull操作后，自動將網頁輸出然後push到博客端。</p><blockquote><p>講實話，這玩意真的挺麻煩，我折騰了特別久，結果還是最最最簡單的辦法：http訪問就推送，最爲方便。</p></blockquote><h1 id="在VPS上安裝hexo的運行環境"><a href="#在VPS上安裝hexo的運行環境" class="headerlink" title="在VPS上安裝hexo的運行環境"></a>在VPS上安裝hexo的運行環境</h1><p>這方面已經在<a href="/2019/08/20/20190820">第一篇文章</a>詳細講過，無非就是安裝nodejs, hexo-cli等等。</p><p><strong>這裏不重複闡述</strong></p><h1 id="給VPS設置在Github上的通用SSH授權"><a href="#給VPS設置在Github上的通用SSH授權" class="headerlink" title="給VPS設置在Github上的通用SSH授權"></a>給VPS設置在Github上的通用SSH授權</h1><p>輸入以下代碼創建一個ssh key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>然後複製~/.ssh/id_rsa.pub文件内的所有内容，打開github的setting中的<a href="https://github.com/settings/keys" target="_blank" rel="noopener">SSH and GPG keys</a></p><p>添加SSH Key即可<br><img src="/images/github-setssh.png" alt></p><h1 id="在VPS上克隆自己創建的庫"><a href="#在VPS上克隆自己創建的庫" class="headerlink" title="在VPS上克隆自己創建的庫"></a>在VPS上克隆自己創建的庫</h1><p>在第二篇文章中我們創建了一個同步庫，裏面存放著hexo的源碼，用來進行多端同步。現在將他克隆到vps上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir auto</span><br><span class="line"><span class="built_in">cd</span> auto</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:yourname/blog.git</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>然後安裝pm2管理後臺應用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><p>之後，在本地創建一個<code>deploy.js</code>，用nodejs寫一個監聽http請求的脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> port = <span class="number">3000</span>; <span class="comment">//監聽端口</span></span><br><span class="line"><span class="keyword">var</span> command = <span class="string">'sh ./deploy.sh'</span> <span class="comment">//運行指令</span></span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'content-type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">    deploy = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec(command,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,stdout,stderr</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'deploy.'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(<span class="string">'It works'</span>);</span><br><span class="line">&#125;).listen(port);</span><br></pre></td></tr></table></figure><p>再創建一個<code>deploy.sh</code>進行<code>pull</code>和<code>hexo g -d</code>操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git pull</span><br><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>這時候監聽服務應該可以運作了。先在別的設備更改一下hexo源碼並push到github，然後試著運行以下代碼。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node ./deploy.js</span><br></pre></td></tr></table></figure><p>訪問vps的<code>http://ip:3000</code>。若你的ip為<code>100.100.100.100</code>，則訪問<code>http://100.100.100.100:3000</code>，不出意外網頁會返回<code>It works</code>，vps控制臺會輸出<code>deploy.</code></p><p>按下<code>Ctrl</code>+<code>C</code>關閉node，輸入<code>pm2 start deploy.js</code>將服務運行在後臺，然後開始配置github</p><h1 id="Github端的配置"><a href="#Github端的配置" class="headerlink" title="Github端的配置"></a>Github端的配置</h1><p>進入你的同步代碼倉庫，點擊上方的Setting。<br><img src="/images/github-repo-setting.png" alt></p><p>然後點擊左方的Webhooks，添加新的webhook<br><img src="/images/github-repo-webhooks.png" alt></p><p>進入后，</p><ol><li>在Payload URL中填入你剛剛訪問的網址（<strong>包括端口</strong>）</li><li>直接點擊Add webhook。<br><img src="/images/github-repo-newwebhooks.png" alt></li></ol><p>然後使用另一臺機器，更改一下你的文章，將blog文件夾更新到github，觀察博客頁面有沒有變化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;關於多端同步依然還有一些東西可以略微分享。我們可以使用Github的webhook功能，對儲存源碼和文章md文件的repo進行pull操作后，自動將網頁輸出然後push到博客端。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;講實話，這玩意真的挺麻煩，我折騰了特別久，結果還是最最
      
    
    </summary>
    
      <category term="技術相關" scheme="https://cupkappu.github.io/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="Hexo" scheme="https://cupkappu.github.io/tags/Hexo/"/>
    
      <category term="博客" scheme="https://cupkappu.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Github" scheme="https://cupkappu.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>安裝Proxmox VE</title>
    <link href="https://cupkappu.github.io/2019/08/22/%E5%AE%89%E8%A3%9DProxmox%20VE/"/>
    <id>https://cupkappu.github.io/2019/08/22/安裝Proxmox VE/</id>
    <published>2019-08-21T22:42:36.726Z</published>
    <updated>2019-08-21T22:42:36.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先決條件"><a href="#先決條件" class="headerlink" title="先決條件"></a>先決條件</h1><ul><li>支持VT-d或AMD-V的CPU</li><li>8G或以上的<strong>可完全擦除磁盤</strong>，或8G以上的U盤用作Proxmox VE的系統盤</li><li>另外一隻2G以上的U盤</li></ul><hr><h1 id="下載Proxmox-VE的安裝鏡像"><a href="#下載Proxmox-VE的安裝鏡像" class="headerlink" title="下載Proxmox VE的安裝鏡像"></a>下載Proxmox VE的安裝鏡像</h1><p><a href="https://www.proxmox.com/en/downloads" target="_blank" rel="noopener">官方載點</a></p><a id="more"></a><h1 id="安裝過程"><a href="#安裝過程" class="headerlink" title="安裝過程"></a>安裝過程</h1><p>將ISO文件寫入2G以上大小的U盤，製作啟動介質</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=~/Downloads/Proxmox.iso of=/dev/sdx</span><br><span class="line"><span class="comment"># Proxmox.iso是你下載的鏡像，而/dev/sdx是你的U盤設備（2G以上）</span></span><br></pre></td></tr></table></figure><p>寫入完畢之後，輸入命令<code>reboot</code>重啟電腦</p><ol><li>進入電腦UEFI設置介面，開啟VT-d或AMD-V，設置2G的閃存盤為首啟動項</li></ol><p><em>若你使用8G以上的U盤作為系統盤，請在這個時候插入</em></p><ol start="2"><li>保存UEFI設置，重啟電腦</li><li>啟動Proxmox VE安裝程序，選擇<code>Install Proxmox VE</code>，進入自檢畫面，等待數秒至數分鐘<br><img src="http://cdn2.myxzy.com/uploadfile/201808/dd9b1533341753.png" alt="安裝程序畫面"></li><li>同意協議，按“Agree”<br><img src="http://cdn2.myxzy.com/uploadfile/201808/a7051533342697.png" alt="協議畫面"></li><li>選擇硬盤，請根據磁盤容量<strong>選擇正確的硬盤</strong><br><img src="http://cdn2.myxzy.com/uploadfile/201808/ba661533342698.png" alt="硬盤畫面"></li></ol><blockquote><p>Proxmox VE安裝<strong>不可以選擇安裝在某個硬盤的某個分區</strong></p><p>一旦選擇安裝，便會<strong>重新分區整個硬盤</strong>，請準備可以<strong>完全擦除</strong>的磁盤設備</p></blockquote><ul><li>設定國家、時區與鍵盤，在Country輸入China、Taiwan或Hong Kong都會直接填充時區信息<br><img src="http://cdn2.myxzy.com/uploadfile/201808/93e51533342699.png" alt="時區與地區"></li><li>設定管理員root帳號密碼郵箱<br><img src="http://cdn2.myxzy.com/uploadfile/201808/55321533342700.png" alt="帳戶密碼"></li><li>設定主機名、IP、網關、掩碼與DNS，設置完畢後點擊Next開始安裝<br><img src="http://cdn2.myxzy.com/uploadfile/201808/03fa1533342702.png" alt="網絡信息"></li></ul><p><strong>安裝完畢需要手動重啟，點擊右下角Reboot重啟</strong><br><img src="http://cdn2.myxzy.com/uploadfile/201808/c0b81533342704.png" alt="Reboot"></p><p>Proxmox VE會在啟動後<strong>於主機的ttl控制台中顯示Web控制台的URL</strong>，此URL<strong>只接受HTTPS</strong><br><img src="http://cdn2.myxzy.com/uploadfile/201808/da1c1533342705.png" alt="TTLURL"><br>使用<strong>安裝的時候設置的</strong>root帳戶密碼，登入網頁端，顯示Proxmox VE的網頁控制台。<br><img src="http://cdn2.myxzy.com/uploadfile/201808/d97a1533343912.png" alt="WEB"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;先決條件&quot;&gt;&lt;a href=&quot;#先決條件&quot; class=&quot;headerlink&quot; title=&quot;先決條件&quot;&gt;&lt;/a&gt;先決條件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;支持VT-d或AMD-V的CPU&lt;/li&gt;
&lt;li&gt;8G或以上的&lt;strong&gt;可完全擦除磁盤&lt;/strong&gt;，或8G以上的U盤用作Proxmox VE的系統盤&lt;/li&gt;
&lt;li&gt;另外一隻2G以上的U盤&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;下載Proxmox-VE的安裝鏡像&quot;&gt;&lt;a href=&quot;#下載Proxmox-VE的安裝鏡像&quot; class=&quot;headerlink&quot; title=&quot;下載Proxmox VE的安裝鏡像&quot;&gt;&lt;/a&gt;下載Proxmox VE的安裝鏡像&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.proxmox.com/en/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方載點&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>實現家庭綜合服務器——給Proxmox VE中的Win10直通顯卡</title>
    <link href="https://cupkappu.github.io/2019/08/22/%E5%AF%A6%E7%8F%BE%E5%AE%B6%E5%BA%AD%E7%B6%9C%E5%90%88%E6%9C%8D%E5%8B%99%E5%99%A8%E2%80%94%E2%80%94%E7%B5%A6Proxmox%20VE%E4%B8%AD%E7%9A%84Win10%E7%9B%B4%E9%80%9A%E9%A1%AF%E5%8D%A1/"/>
    <id>https://cupkappu.github.io/2019/08/22/實現家庭綜合服務器——給Proxmox VE中的Win10直通顯卡/</id>
    <published>2019-08-21T22:42:36.726Z</published>
    <updated>2019-08-21T22:42:36.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>話説我弟最近上中學，他開始需要使用電腦做學校的課業，而我家裏有一臺chromebook、台機和一臺特別破舊的超極本。</p><p>超極本的發熱已經接近70度，可以把人手烤焦，chromebook的系統不支援他學校的CD軟體，而我的臺機，有太多的不可見人的東西，更是不能給他使用。</p><p>但是教育乃一切之本，他的生日也臨近，想給他送個禮物，於是看到了我家不斷跑著OVM、ikuai、web-server和域名ddns的伺服器，突然覺得，可以壓縮一下前面幾個服務的性能，給他搭建一個能用的電腦操作平臺。</p><a id="more"></a><p><strong>大致的想法就是買個基礎顯卡，買個固態硬盤直通到虛擬機，然後直通USB口，把這些綫捆成一坨拉到他的房間，給他個電腦屏幕和鍵盤。</strong></p><p><strong><em>我還想把成本控制在1000塊錢以内來著</em></strong></p><h1 id="原有機件介紹"><a href="#原有機件介紹" class="headerlink" title="原有機件介紹"></a>原有機件介紹</h1><p>服務器是一臺大致如下配置的服務器</p><table><thead><tr><th align="center">配件</th><th align="center">型號</th><th align="center">已用</th></tr></thead><tbody><tr><td align="center">主板</td><td align="center">B75</td><td align="center">/</td></tr><tr><td align="center">SATA口</td><td align="center">2*3.0+4*2.0</td><td align="center">已用3</td></tr><tr><td align="center">PCI-E插槽</td><td align="center">2条PCI-E*16</td><td align="center">已用一條用於網卡</td></tr><tr><td align="center">CPU</td><td align="center">i5-3330</td><td align="center">虛擬機1+1+4+4+2</td></tr><tr><td align="center">RAM</td><td align="center">8G*2 DDR3 1600</td><td align="center">已用512M*3+1.5G+2G=5G</td></tr></tbody></table><p><img src="/images/01.png" alt="Screenshot 2019-08-19 at 14.01.22.png"></p><p>可以看到CPU部分略微吃緊，而RAM依然有機會分配8G給虛擬機使用，PCI-E插槽可以容納一張獨立顯卡，硬盤也可以插多一張SSD。</p><p>找時間把各種吃CPU的服務搬出伺服器為上策。</p><h1 id="需要添置的硬件"><a href="#需要添置的硬件" class="headerlink" title="需要添置的硬件"></a>需要添置的硬件</h1><p>由於我是要給現有的伺服器增加一個Win10，並給他加上顯卡與硬盤等等外設，還要讓他可以在遠處傳輸，於是這需要以下配件。</p><table><thead><tr><th align="center">配件</th><th align="center">名稱</th><th align="center">價格</th></tr></thead><tbody><tr><td align="center">顯卡</td><td align="center">RX550 2G半高顯卡</td><td align="center">333港幣</td></tr><tr><td align="center">硬盤</td><td align="center">240G臺電SSD</td><td align="center">210港幣</td></tr><tr><td align="center">USB延長綫</td><td align="center">/</td><td align="center">142港幣</td></tr><tr><td align="center">HDMI延長綫</td><td align="center">/</td><td align="center">128港幣</td></tr><tr><td align="center">總價</td><td align="center"></td><td align="center">814港幣</td></tr></tbody></table><p>總而言之價格是控制在了1000港幣以内，算是完成目标。</p><p><em>等到我有空，買完所有需要的配件就開搞</em></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h1&gt;&lt;p&gt;話説我弟最近上中學，他開始需要使用電腦做學校的課業，而我家裏有一臺chromebook、台機和一臺特別破舊的超極本。&lt;/p&gt;
&lt;p&gt;超極本的發熱已經接近70度，可以把人手烤焦，chromebook的系統不支援他學校的CD軟體，而我的臺機，有太多的不可見人的東西，更是不能給他使用。&lt;/p&gt;
&lt;p&gt;但是教育乃一切之本，他的生日也臨近，想給他送個禮物，於是看到了我家不斷跑著OVM、ikuai、web-server和域名ddns的伺服器，突然覺得，可以壓縮一下前面幾個服務的性能，給他搭建一個能用的電腦操作平臺。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>讓Markdown文檔一秒轉換為Keynote演示文檔 —— md2key學習筆記</title>
    <link href="https://cupkappu.github.io/2019/08/22/%E8%AE%93Markdown%E6%96%87%E6%AA%94%E4%B8%80%E7%A7%92%E8%BD%89%E6%8F%9B%E7%82%BAKeynote%E6%BC%94%E7%A4%BA%E6%96%87%E6%AA%94%20%E2%80%94%E2%80%94%20md2key%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    <id>https://cupkappu.github.io/2019/08/22/讓Markdown文檔一秒轉換為Keynote演示文檔 —— md2key學習筆記/</id>
    <published>2019-08-21T22:42:36.726Z</published>
    <updated>2019-08-21T22:42:36.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Keynote是一個蘋果自家的演示文檔軟件，有許多強大的預設，動畫效果十分驚人<br>md2key是一個讓Markdown格式的文檔轉換為Keynote文檔的工具，由k0kubun開發維護<br><a href="https://github.com/k0kubun/md2key" target="_blank" rel="noopener">GitHub主頁</a></p><a id="more"></a><h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 僅限macOS用戶</span><br><span class="line">gem install md2key</span><br></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li>創建一個Keynote文檔</li><li>添加一張你想要的樣式幻燈片作為封面，然後把第一張幻燈片刪除</li><li>創建第二張幻燈片，這張幻燈片的樣式作為內頁</li><li>保持文檔開啟，在終端直接輸入<code>md2key markdown.md</code></li></ol><h1 id="進階用法"><a href="#進階用法" class="headerlink" title="進階用法"></a>進階用法</h1><ol><li>點擊右方的“編輯母版幻燈片”</li><li>在Keynote中給任何你將會用到的母版幻燈片命名為“cover”“h1”“h2”⋯⋯“h5”</li><li>cover對應第一段“#”，第一個#之後的文字會印刷在封面頁，h1對應一個#，h2對應兩個#⋯⋯</li></ol><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># The presentation</span></span><br><span class="line">@k0kubun</span><br><span class="line"></span><br><span class="line"><span class="section">## Hello world</span></span><br><span class="line">I'm takashi kokubun</span><br><span class="line"><span class="bullet">- </span>This is a pen</span><br><span class="line"><span class="bullet">- </span>Nested item is available</span><br><span class="line"></span><br><span class="line"><span class="section">## How are you?</span></span><br><span class="line"><span class="bullet">- </span>I'm fine thank you</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;Keynote是一個蘋果自家的演示文檔軟件，有許多強大的預設，動畫效果十分驚人&lt;br&gt;md2key是一個讓Markdown格式的文檔轉換為Keynote文檔的工具，由k0kubun開發維護&lt;br&gt;&lt;a href=&quot;https://github.com/k0kubun/md2key&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub主頁&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在Proxmox中安裝macOS Mojave並設置直通顯卡</title>
    <link href="https://cupkappu.github.io/2019/08/22/%E5%9C%A8Proxmox%E4%B8%AD%E5%AE%89%E8%A3%9DmacOS%20Mojave%E4%B8%A6%E8%A8%AD%E7%BD%AE%E7%9B%B4%E9%80%9A%E9%A1%AF%E5%8D%A1/"/>
    <id>https://cupkappu.github.io/2019/08/22/在Proxmox中安裝macOS Mojave並設置直通顯卡/</id>
    <published>2019-08-21T22:42:36.725Z</published>
    <updated>2019-08-21T22:42:36.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在PVE中安裝macOS-Mojave並設置直通顯卡"><a href="#在PVE中安裝macOS-Mojave並設置直通顯卡" class="headerlink" title="在PVE中安裝macOS Mojave並設置直通顯卡"></a>在PVE中安裝macOS Mojave並設置直通顯卡</h1><h2 id="先決條件："><a href="#先決條件：" class="headerlink" title="先決條件："></a>先決條件：</h2><ul><li>8G或以上內存</li><li>支持虛擬化以及SSE4.2的cpu</li></ul><blockquote><p><em>包括AMD與INTEL</em></p></blockquote><a id="more"></a><h2 id="1-安裝PVE"><a href="#1-安裝PVE" class="headerlink" title="1 安裝PVE"></a>1 安裝PVE</h2><p><a href="http://www.kappu.ml/index.php/archives/3/" target="_blank" rel="noopener">安裝教程</a><br>此處安裝方法與一般的方法相同，推薦將pve系統安裝到usb設備</p><h2 id="2-創建macos安裝鏡像"><a href="#2-創建macos安裝鏡像" class="headerlink" title="2 創建macos安裝鏡像"></a>2 創建macos安裝鏡像</h2><p>在linux或macos系統下運行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget  https://raw.githubusercontent.com/thenickdude/OSX-KVM/master/fetch-macOS.py</span><br><span class="line">chmod +x fetch-macOS.py</span><br><span class="line">./fetch-macOS.py</span><br></pre></td></tr></table></figure><p>在選單中選擇最新的iso，等待下載完成後，運行以下命令，將dmg包轉換成iso包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安裝dmg2img 若你是deb包管理系以外的系統，可以自行查找如何安裝dmg2img</span><br><span class="line">apt-get install dmg2img -y</span><br><span class="line"># 利用dmg2img將基本系統dmg鏡像轉為iso鏡像</span><br><span class="line">dmg2img BaseSystem.dmg Mojave-installer.iso</span><br><span class="line"></span><br><span class="line"># 若你是macOS，請使用以下命令</span><br><span class="line">hdiutil convert BaseSystem.dmg -format RdWr -o Mojave-installer.iso</span><br><span class="line">mv Mojave-installer.iso.img Mojave-installer.iso</span><br></pre></td></tr></table></figure><p>然後下載Clover</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Ubuntu &amp; Debian</span><br><span class="line">apt-get install unzip -y</span><br><span class="line"># Centos &amp; RHEL</span><br><span class="line">yum install unzip -y</span><br><span class="line"># 取得clover</span><br><span class="line">wget https://github.com/thenickdude/OSX-KVM/releases/download/clover-r4920/clover-r4920.iso.zip &amp;&amp; unzip clover-r4920.iso.zip</span><br></pre></td></tr></table></figure><p>然後將clover-r4920.iso與Mojave-installer.iso上傳到PVE中</p><h2 id="3-在網頁中創建虛擬機"><a href="#3-在網頁中創建虛擬機" class="headerlink" title="3 在網頁中創建虛擬機"></a>3 在網頁中創建虛擬機</h2><ol><li>OS頁面選擇Clover ISO進行引導</li><li>系統選擇其他（other）</li><li>System頁面的顯示卡選擇VMware兼容</li><li>BIOS選擇OVMF</li><li>Machine選擇q35</li><li>硬盤選擇SATA，緩存設置成Write back（不安全）</li><li>CPU的類型設置成Penryn</li><li>網卡設置成Vmware vmxnet3</li></ol><p>點開虛擬機的硬件選項卡，添加Mojave-installer.iso，選擇ide通道的cd-ram</p><p>先不要啟動虛擬機，在ssh中打開/etc/pve/qemu-server/你的VMID.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/pve/qemu-server/你的VMID.conf</span><br></pre></td></tr></table></figure><p>然後輸入以下代碼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">args: -device isa-applesmc,osk=&quot;ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc&quot; -smbios type=2 -cpu Penryn,kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,+pcid,+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check -device usb-kbd,bus=ehci.0,port=2</span><br></pre></td></tr></table></figure><p>將兩個驅動器的配置中的cdrom刪除，加入cache=unsafe<br>最後的文檔應該看起來像這樣</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">args: -device isa-applesmc,osk=&quot;ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc&quot; -smbios type=2 -cpu Penryn,kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,+pcid,+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check -device usb-kbd,bus=ehci.0,port=2</span><br><span class="line">balloon: 0</span><br><span class="line">bios: ovmf</span><br><span class="line">boot: cdn</span><br><span class="line">bootdisk: ide2</span><br><span class="line">cores: 4</span><br><span class="line">cpu: Penryn</span><br><span class="line">efidisk0: vms:vm-144-disk-1,size=128K</span><br><span class="line">ide0: isos:iso/Mojave.iso,cache=unsafe</span><br><span class="line">ide2: isos:iso/clover-r4920.iso,cache=unsafe</span><br><span class="line">machine: q35</span><br><span class="line">memory: 8192</span><br><span class="line">name: mojave</span><br><span class="line">net0: vmxnet3=xx:xx:xx:xx:xx:xx,bridge=vmbr0,firewall=1</span><br><span class="line">numa: 0</span><br><span class="line">ostype: other</span><br><span class="line">sata0: vms:vm-144-disk-0,cache=unsafe,size=64G</span><br><span class="line">smbios1: uuid=xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx</span><br><span class="line">sockets: 1</span><br><span class="line">vga: vmware</span><br></pre></td></tr></table></figure><p>設置完畢後，根據<a href="https://www.nicksherlock.com/2018/04/patch-ovmf-to-support-macos-in-proxmox-5-1/" target="_blank" rel="noopener">patch-ovmf-to-support-macos-in-proxmox-5-1 </a>來安裝OVMF庫</p><blockquote><p>For PVE 6</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Add missing locale</span><br><span class="line">echo &quot;en_US.UTF-8 UTF-8&quot; &gt;&gt; /etc/locale.gen</span><br><span class="line">locale-gen</span><br><span class="line">export LC_ALL=en_US.UTF-8</span><br><span class="line"></span><br><span class="line"># Add tools and build dependencies:</span><br><span class="line">apt update</span><br><span class="line">apt install build-essential git lintian debhelper iasl nasm \</span><br><span class="line">  python uuid-dev gcc-aarch64-linux-gnu bc python3-distutils -y</span><br><span class="line"></span><br><span class="line"># Clone my patched source</span><br><span class="line">git clone -b macos-support-proxmox-6.0 https://github.com/thenickdude/pve-edk2-firmware.git</span><br><span class="line"></span><br><span class="line"># Build it</span><br><span class="line">cd pve-edk2-firmware</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">dpkg -i pve-edk2-firmware_*.deb</span><br><span class="line"></span><br><span class="line"># Prevent it from being replaced later by apt upgrade:</span><br><span class="line">apt-mark hold pve-edk2-firmware</span><br></pre></td></tr></table></figure><h2 id="4-設置直通"><a href="#4-設置直通" class="headerlink" title="4 設置直通"></a>4 設置直通</h2><p>首先，編輯grub<code>vim /etc/default/grub</code><br>將<code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</code>改為<code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet intel_iommu=on video=efifb:off&quot;</code><br><strong>（若是amd則改為amd_iommu=on）</strong></p><p>執行<code>update-grub</code>命令更新grub信息<br>最後輸入<code>dmesg | grep -e DMAR -e IOMMU</code>命令檢查是否有錯<br>然後編輯/etc/modules <code>nano /etc/modules</code><br>在最尾加入以下四行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vfio</span><br><span class="line">vfio_iommu_type1</span><br><span class="line">vfio_pci</span><br><span class="line">vfio_virqfd</span><br></pre></td></tr></table></figure><p>再次輸入<code>dmesg | grep ecap</code>命令檢查設備是否支持iommu<br>然後執行以下命令將驅動加入黑名單</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;blacklist radeon&quot; &gt;&gt; /etc/modprobe.d/blacklist.conf</span><br><span class="line">echo &quot;blacklist nouveau&quot; &gt;&gt; /etc/modprobe.d/blacklist.conf</span><br><span class="line">echo &quot;blacklist nvidia&quot; &gt;&gt; /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure><p>執行<code>update-initramfs -u</code>命令更新信息<br>執行<code>lspci</code>，找出顯卡的代號（例如01：00），然後執行<code>lspci -n -s 01:00</code><br>得到類似以下的輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">01:00.0 0300: 10de:1d01 (rev a1)</span><br><span class="line">01:00.1 0403: 10de:0fb8 (rev a1)</span><br></pre></td></tr></table></figure><p>其中<code>10de:1d01</code>與<code>10de:0fb8</code>是vendor IDs<br>將vendor IDs指定到VFIO模塊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;options vfio-pci ids=10de:1d01,10de:0fb8&quot; &gt; /etc/modprobe.d/vfio.conf</span><br></pre></td></tr></table></figure><p>進入web管理介面</p><ul><li>在vm的硬件選項卡中編輯添加PCI設備</li><li>選定顯卡對應的<code>01:00.0</code>與<code>01:00.1</code></li><li>在<code>01:00.0</code>（顯示設備）中勾選<ul><li>PCI-Express</li><li>All Functions</li><li>主GPU</li></ul></li><li>檢查文件<code>/etc/pve/qemu-server/YOUR-VM-ID.conf</code><ul><li>確保01:00後的參數正確</li></ul></li></ul><p><strong>e.g.</strong><code>hostpci0: 01:00,x-vga=1,pcie=1</code></p><p>然後，直通鼠標鍵盤到VM中，添加USB設備，選擇鼠標鍵盤，然後添加到VM</p><h2 id="5-安裝Mojave"><a href="#5-安裝Mojave" class="headerlink" title="5 安裝Mojave"></a>5 安裝Mojave</h2><p>現在啟動你的虛擬機，若你設置了直通，啟動的一瞬間會發生以下事情</p><ul><li>連接在你顯卡的顯示器應該會從PVE的ttl介面變為黑屏，然後變成OVMF UEFI啟動介面。</li><li>你的鍵盤鼠標這時候也可以直接控制虛擬機。</li></ul><p>在啟動的時候趕快按下F2以進入OVMF設置畫面。</p><ol><li>進入Device Manager</li><li>選擇OVMF platform configuration</li><li>設置分辨率為1920x1080</li><li>保存設置</li><li>在根菜單下選擇Reset（不是continue）</li></ol><p>然後你應該進入了Clover，接下來跟著指引安裝系統<br>全部安裝完畢之後，再次啟動時</p><ol><li>手動按下F2</li><li>選定Clover啟動項</li></ol><p>然後才會看到磁盤內的Mac系統。<br>進入Mac系統後，打開終端，輸入<code>diskutil list</code><br>以檢查設備<br>然後輸入<code>sudo dd if=&lt;Clover CD的EFI分區&gt; of=&lt;硬盤的EFI分區&gt;</code><br>將Clover安裝到硬盤中</p><blockquote><p>你也可以忽略這一步，將Clover CD永久掛載在虛擬機下</p></blockquote><p>關機，移除CLover CD，從硬盤啟動。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在PVE中安裝macOS-Mojave並設置直通顯卡&quot;&gt;&lt;a href=&quot;#在PVE中安裝macOS-Mojave並設置直通顯卡&quot; class=&quot;headerlink&quot; title=&quot;在PVE中安裝macOS Mojave並設置直通顯卡&quot;&gt;&lt;/a&gt;在PVE中安裝macOS Mojave並設置直通顯卡&lt;/h1&gt;&lt;h2 id=&quot;先決條件：&quot;&gt;&lt;a href=&quot;#先決條件：&quot; class=&quot;headerlink&quot; title=&quot;先決條件：&quot;&gt;&lt;/a&gt;先決條件：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;8G或以上內存&lt;/li&gt;
&lt;li&gt;支持虛擬化以及SSE4.2的cpu&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;包括AMD與INTEL&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>時間管理 —— 應該怎麼在爆炸的事項中開心生存</title>
    <link href="https://cupkappu.github.io/2019/08/21/%E4%BB%BB%E5%8B%99%E7%AE%A1%E7%90%86%20%E2%80%94%E2%80%94%20%E6%87%89%E8%A9%B2%E6%80%8E%E9%BA%BC%E5%9C%A8%E7%88%86%E7%82%B8%E7%9A%84%E4%BA%8B%E9%A0%85%E4%B8%AD%E9%96%8B%E5%BF%83%E7%94%9F%E5%AD%98/"/>
    <id>https://cupkappu.github.io/2019/08/21/任務管理 —— 應該怎麼在爆炸的事項中開心生存/</id>
    <published>2019-08-21T13:18:01.000Z</published>
    <updated>2019-08-21T22:42:36.725Z</updated>
    
    <content type="html"><![CDATA[<p>閱讀<a href="https://www.zybuluo.com/RainbowGG/note/674660" target="_blank" rel="noopener">這篇文章</a>所得的心得</p><h1 id="目標與任務"><a href="#目標與任務" class="headerlink" title="目標與任務"></a>目標與任務</h1><ul><li>目標是<strong>可量化的一個指標，表示未來將會透過某種方式達成這個指標</strong></li><li>任務是<strong>可做到的某個動作，表示自己將會在某個時間進行此項動作</strong></li></ul><p>合適的時間管理不可以將達成後的目標和自己應該要做的任務混淆，否則會徒增迷惑。</p><a id="more"></a><h1 id="周-日-目標法"><a href="#周-日-目標法" class="headerlink" title="周/日 目標法"></a>周/日 目標法</h1><ol><li>每晚列出明天的任務清單，其中的代辦事項均來自於本周的清單</li><li>當完成清單後，任務便結束，絕不增加任何額外的任務</li><li>等到一周結束的時候，準備下一周的任務清單</li></ol><h1 id="任務清單的注意事項"><a href="#任務清單的注意事項" class="headerlink" title="任務清單的注意事項"></a>任務清單的注意事項</h1><ul><li>每日、每周只列出有限的、明確的任務數量</li><li>把重心放在完成任務上，而不是一味的提高質量</li><li>掌握工作強度後，漸漸提高工作量，但要確保可以完成，絕不產生拖延<ul><li>可以建立一個「彈性清單」，新添加任務的時候以此爲測試</li></ul></li><li>在完成工作後，充分放鬆與休息</li></ul><h1 id="精力管理"><a href="#精力管理" class="headerlink" title="精力管理"></a>精力管理</h1><p>精力分爲以下幾種類型，並以以下方式保持充沛精力</p><ul><li>體力<ul><li>科學飲食、睡眠與鍛煉</li></ul></li><li>動力<ul><li>對工作成果的渴望</li><li>工作成果對自己的激勵</li><li>e.g.<ul><li>整潔有序的工作環境</li><li>可以增強自尊感的工作目標</li></ul></li></ul></li><li>創造力<ul><li>來源於大量的、廣泛的多方面閱讀</li></ul><ol><li>頭腦風暴</li><li>邏輯批判</li></ol></li></ul><h1 id="目標分類"><a href="#目標分類" class="headerlink" title="目標分類"></a>目標分類</h1><ol><li>人生目標：對未來影響超過五年的</li><li>發展目標：對未來影響超過六個月的</li><li>即時目標：對未來影響短過六個月的</li></ol><blockquote><p>若爲了生存，側重點應該放在即時目標；<br>若生存已經不是主要問題，那就將側重點放在1、2類</p></blockquote><h2 id="關於對項目的取舍"><a href="#關於對項目的取舍" class="headerlink" title="關於對項目的取舍"></a>關於對項目的取舍</h2><ul><li>當項目與目標背離時，舍棄。</li><li>當任務與任意項目無聯系時候（孤兒任務）<ul><li>少投入，或</li><li>舍棄</li></ul></li></ul><h1 id="應該注意的雜項"><a href="#應該注意的雜項" class="headerlink" title="應該注意的雜項"></a>應該注意的雜項</h1><ul><li>設定起始與結束時間，忽略工作時長</li><li>避免僞工作：查收郵件，無目的瀏覽網頁</li><li>專心做、盡情玩。</li><li>保持人際聯系，明確表達自己什麼時候有空沒空</li><li>對於上網<ul><li>做明確具體的事情</li><li>e.g.<ul><li>固定時間查郵件</li><li>固定更新博客/信息</li><li>固定時間檢查聊天軟件/微博/推特</li></ul></li><li>有意識的進行網絡齋戒</li></ul></li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>日程本</li><li>清單軟件</li><li>GTD相關軟件</li></ul><h1 id="想說的話"><a href="#想說的話" class="headerlink" title="想說的話"></a>想說的話</h1><p>寫博客也是因爲自己沒法好好整理自己的知識，平時和別人分享心得也無從下手。</p><p>我因應自己的興趣略微研究了一段時間音樂，從小也對信息科技相關的知識十分感興趣。直到現在，除了用Excel做一份賬單，其他的信息處理方法我都相當的生疏。</p><p>前段時間試着教給別人識別吉他上面的音與鋼琴上面的音之間的對應關系，就這麼簡單的一個知識點，因爲我長期沒有整理自己的腦袋，足足教了半個多小時，這時候才發現自己的表達能力因爲長期停止寫作而退化到幾乎要不如小學生的階段。</p><p>閱讀過的書籍前段時間依然會使用紙筆寫下自己的心得，看過的動畫也會分享自己的感動之處。前不久依然會認認真真在聽完一首值得認真分析評論的歌之後，用記事本慢慢敲下和弦進行、表達方法相對應的情感等等信息。</p><p>畢業之後除了荒廢自我，每天除了上班下班以外幾乎都不想去整理自己，搞清楚自己究竟在做什麼了，直到我看到有同學畢業沒多久便達成了多項目標，終於醒了過來。</p><p>管理自己的行爲，管理自己的知識與管理自己的財富，才能活得令自己滿意。</p><h3 id="共勉！"><a href="#共勉！" class="headerlink" title="共勉！"></a>共勉！</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;閱讀&lt;a href=&quot;https://www.zybuluo.com/RainbowGG/note/674660&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;這篇文章&lt;/a&gt;所得的心得&lt;/p&gt;
&lt;h1 id=&quot;目標與任務&quot;&gt;&lt;a href=&quot;#目標與任務&quot; class=&quot;headerlink&quot; title=&quot;目標與任務&quot;&gt;&lt;/a&gt;目標與任務&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;目標是&lt;strong&gt;可量化的一個指標，表示未來將會透過某種方式達成這個指標&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;任務是&lt;strong&gt;可做到的某個動作，表示自己將會在某個時間進行此項動作&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;合適的時間管理不可以將達成後的目標和自己應該要做的任務混淆，否則會徒增迷惑。&lt;/p&gt;
    
    </summary>
    
      <category term="生活心得" scheme="https://cupkappu.github.io/categories/%E7%94%9F%E6%B4%BB%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="時間管理" scheme="https://cupkappu.github.io/tags/%E6%99%82%E9%96%93%E7%AE%A1%E7%90%86/"/>
    
      <category term="事項" scheme="https://cupkappu.github.io/tags/%E4%BA%8B%E9%A0%85/"/>
    
  </entry>
  
  <entry>
    <title>Hexo學習筆記 —— 多端同步、Github Pages部署、更改主題、評論功能（三）</title>
    <link href="https://cupkappu.github.io/2019/08/20/2019-08-20%2021_59_40/"/>
    <id>https://cupkappu.github.io/2019/08/20/2019-08-20 21_59_40/</id>
    <published>2019-08-20T12:03:50.000Z</published>
    <updated>2019-08-21T22:42:36.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主題-——-NexT"><a href="#主題-——-NexT" class="headerlink" title="主題 —— NexT"></a>主題 —— <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT</a></h1><p>進入hexo目錄，然後下載主題</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><ul><li>編輯hexo目錄下的<code>_config.yml</code>，把主題改成改成<code>theme: next</code>。</li><li>然後編輯<code>theme/next/_config.yml</code><ul><li>搜索<code>schemes</code>關鍵詞，將<code>scheme: Gemini</code>前的#號去掉，然後注釋掉默認的<code>scheme: Muse</code></li></ul></li></ul><p>運行以下命令更新主題（若你有根據上一篇編寫<code>push</code>腳本）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./push</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="評論"><a href="#評論" class="headerlink" title="評論"></a>評論</h1><p>Hexo是一個<strong>靜態博客生成工具</strong>，生成的頁面僅有<strong>展示功能</strong>，而沒有<strong>提交功能</strong>。</p><blockquote><p>以下內容參考 <a href="https://www.jianshu.com/p/d68de067ea74" target="_blank" rel="noopener">https://www.jianshu.com/p/d68de067ea74</a></p></blockquote><p>如果需要實現評論，Hexo是沒法接收網頁傳來的表單信息的,則需要借助相關的服務。這裏使用的是<a href="https://disqus.com/" target="_blank" rel="noopener"><strong>Disqus</strong></a></p><p>進入官方站點注冊後登錄，點擊GET START，然後按下下圖所示按鈕</p><p><img src="https://upload-images.jianshu.io/upload_images/5863464-7d0a40ee35c0dafa.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;主題-——-NexT&quot;&gt;&lt;a href=&quot;#主題-——-NexT&quot; class=&quot;headerlink&quot; title=&quot;主題 —— NexT&quot;&gt;&lt;/a&gt;主題 —— &lt;a href=&quot;https://github.com/theme-next/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NexT&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;進入hexo目錄，然後下載主題&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/theme-next/hexo-theme-next themes/next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;編輯hexo目錄下的&lt;code&gt;_config.yml&lt;/code&gt;，把主題改成改成&lt;code&gt;theme: next&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;然後編輯&lt;code&gt;theme/next/_config.yml&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;搜索&lt;code&gt;schemes&lt;/code&gt;關鍵詞，將&lt;code&gt;scheme: Gemini&lt;/code&gt;前的#號去掉，然後注釋掉默認的&lt;code&gt;scheme: Muse&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;運行以下命令更新主題（若你有根據上一篇編寫&lt;code&gt;push&lt;/code&gt;腳本）&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./push&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技術相關" scheme="https://cupkappu.github.io/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="Hexo" scheme="https://cupkappu.github.io/tags/Hexo/"/>
    
      <category term="博客" scheme="https://cupkappu.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Github" scheme="https://cupkappu.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo學習筆記 —— 多端同步、Github Pages部署、更改主題、評論功能（二）</title>
    <link href="https://cupkappu.github.io/2019/08/20/2019-08-20%2019_03_50/"/>
    <id>https://cupkappu.github.io/2019/08/20/2019-08-20 19_03_50/</id>
    <published>2019-08-20T11:03:50.000Z</published>
    <updated>2019-08-22T09:19:41.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同步多端……真正麻煩的事情來了"><a href="#同步多端……真正麻煩的事情來了" class="headerlink" title="同步多端……真正麻煩的事情來了"></a>同步多端……真正麻煩的事情來了</h1><p>根據剛剛提到的<strong>文件目錄結構</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-- _config.yml <span class="comment">#配置文件</span></span><br><span class="line">|-- package.json <span class="comment">#hexo的依賴，插件信息也保存在這文件內</span></span><br><span class="line">|-- scaffolds <span class="comment">#標準模板，一般不需要關心</span></span><br><span class="line">|-- <span class="built_in">source</span> <span class="comment">#資源目錄，文章與各種附件也都保存在這</span></span><br><span class="line">   |-- _posts <span class="comment">#文章文件夾</span></span><br><span class="line">|-- themes <span class="comment">#主題</span></span><br><span class="line">|-- .gitignore <span class="comment">#git同步的時候忽略的目錄與文件</span></span><br><span class="line">|-- public <span class="comment">#生成後的靜態博客文件夾</span></span><br></pre></td></tr></table></figure><p>有同步意義的是_config.yml, package.json, source/, themes</p><p>最重要的是<code>source</code>文件夾，裏面包含了可以引用的圖片、文章文件以及各種附加的小附件。</p><a id="more"></a><h2 id="Google-Drive-百度網盤-Dropbox等同步網盤"><a href="#Google-Drive-百度網盤-Dropbox等同步網盤" class="headerlink" title="Google Drive, 百度網盤, Dropbox等同步網盤"></a>Google Drive, 百度網盤, Dropbox等同步網盤</h2><p>使用<a href="https://drive.google.com" target="_blank" rel="noopener">Google Drive</a>一類簡單粗暴的多端同步網盤來同步我們的hexo文檔和配置，缺點就是node相關的文件也都會一並同步，好處就是特別省事。</p><p>直接將整個目錄復制到Google Drive即可，之後所有操作都在掛載後的Google Drive裏面進行。</p><p>在另外一臺機器，安裝Google Drive同步程序，然後將hexo目錄設置爲同步以及離線可用，之後整個Hexo端便會一直保持着最新的文件。</p><p><strong>其他網盤同理</strong></p><h2 id="Github同步"><a href="#Github同步" class="headerlink" title="Github同步"></a>Github同步</h2><p>這個方案配置比較麻煩，但是後期使用問題較少，挺多大佬也是使用這個方案進行多端同步</p><p>以下是步驟</p><ol><li><p>先在Github建立一個私人庫，專門存放Hexo部署程序</p></li><li><p>在Hexo的目錄下，運行<code>git init</code></p></li><li><p>修改<code>.gitignore</code>爲以下內容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure></li><li><p>執行以下代碼，進行第一次推送代碼</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote add origin git@github.com:username/library.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>創建一個名爲push的文件，將以下代碼輸入進去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m `date +%Y-%m-%d-%H%M`</span><br><span class="line">git push origin master</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li><li><p>輸入<code>chmod +x push</code>，給腳本增加運行權限</p></li><li><p>輸入<code>./push</code>嘗試推送</p></li></ol><p>之後，新的機器先安裝Hexo，再輸入<code>git clone git@github.com:username/library.git</code>，再進入克隆目錄內，輸入<code>npm install</code>安裝依賴即可。</p><p>每次編輯完文章，輸入<code>./push</code>推送，換到另一臺電腦想繼續編輯時，輸入<code>git pull</code>拉取最新檔案下來即可。</p><blockquote><p>2019-08-22更新</p><p>如果你有自己的VPS服務器，可以使用github的webhook功能進行自動更新，具體可以查看<a href="https://cupkappu.github.io/2019/08/22/HEXO_STUDY_4/">這篇文章</a></p><p>需要將push文件修改成以下内容才能使用webhook自動更新網頁端</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git add .</span><br><span class="line">git commit -m `date +%Y-%m-%d-%H%M`</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;同步多端……真正麻煩的事情來了&quot;&gt;&lt;a href=&quot;#同步多端……真正麻煩的事情來了&quot; class=&quot;headerlink&quot; title=&quot;同步多端……真正麻煩的事情來了&quot;&gt;&lt;/a&gt;同步多端……真正麻煩的事情來了&lt;/h1&gt;&lt;p&gt;根據剛剛提到的&lt;strong&gt;文件目錄結構&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;|-- _config.yml &lt;span class=&quot;comment&quot;&gt;#配置文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- package.json &lt;span class=&quot;comment&quot;&gt;#hexo的依賴，插件信息也保存在這文件內&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- scaffolds &lt;span class=&quot;comment&quot;&gt;#標準模板，一般不需要關心&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#資源目錄，文章與各種附件也都保存在這&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |-- _posts &lt;span class=&quot;comment&quot;&gt;#文章文件夾&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- themes &lt;span class=&quot;comment&quot;&gt;#主題&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- .gitignore &lt;span class=&quot;comment&quot;&gt;#git同步的時候忽略的目錄與文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- public &lt;span class=&quot;comment&quot;&gt;#生成後的靜態博客文件夾&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有同步意義的是_config.yml, package.json, source/, themes&lt;/p&gt;
&lt;p&gt;最重要的是&lt;code&gt;source&lt;/code&gt;文件夾，裏面包含了可以引用的圖片、文章文件以及各種附加的小附件。&lt;/p&gt;
    
    </summary>
    
      <category term="技術相關" scheme="https://cupkappu.github.io/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="Hexo" scheme="https://cupkappu.github.io/tags/Hexo/"/>
    
      <category term="博客" scheme="https://cupkappu.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Github" scheme="https://cupkappu.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo學習筆記 —— 多端同步、Github Pages部署、更改主題、評論功能（一）</title>
    <link href="https://cupkappu.github.io/2019/08/20/20190820/"/>
    <id>https://cupkappu.github.io/2019/08/20/20190820/</id>
    <published>2019-08-20T09:23:30.000Z</published>
    <updated>2019-08-21T22:42:36.725Z</updated>
    
    <content type="html"><![CDATA[<p>舊的博客是用Typecho做的，什麼都挺好，就是這個博客沒法直接上載.md文件，備份也顯得挺麻煩。</p><p>在15年的時候嘗試搭建Hexo博客，那時候的Hexo的配置流程比現在復雜特別多。現在比之前方便多了，想着要不要遷移到Hexo。</p><a id="more"></a><h2 id="基本了解"><a href="#基本了解" class="headerlink" title="基本了解"></a>基本了解</h2><p><strong>Hexo主要由三個部分組成</strong></p><ul><li>生成端<ul><li>生成更新後的博客靜態頁面</li></ul></li><li>推送端<ul><li>負責把靜態頁面推送到網頁</li></ul></li><li>網頁端<ul><li>提供網頁瀏覽服務</li></ul></li></ul><p>一般生成端和推送端整合在一起，網頁端獨立部署在虛擬主機或者Github Pages、Coding Pages上。<br>但是文章內容都是保存在生成端的source/_posts，要是換一臺機子就沒法同步文章，也沒法推送文章。</p><h2 id="安裝hexo"><a href="#安裝hexo" class="headerlink" title="安裝hexo"></a>安裝hexo</h2><p>首先需要安裝nodejs與npm，在官網上也有<a href="https://nodejs.org/zh-cn/download/package-manager/" target="_blank" rel="noopener">不同系統使用包管理器安裝的指引</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Using Ubuntu</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using Debian, as root</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | bash -</span><br><span class="line">apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using RHEL, CentOS, CloudLinux and Fedora, as root</span></span><br><span class="line"></span><br><span class="line">curl -sL https://rpm.nodesource.com/setup_12.x | bash -</span><br></pre></td></tr></table></figure><p>安裝完nodejs之後使用<code>node -v</code>與<code>npm -v</code>查看nodejs與npm的版本。可以使用<code>npm install npm</code>進行升級，然後使用npm安裝hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog &amp;&amp; <span class="built_in">cd</span> blog</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">hexo init <span class="comment">#初始化hexo</span></span><br><span class="line"><span class="comment">#輸入以下命令檢查網站雛形</span></span><br><span class="line">hexo new <span class="built_in">test</span></span><br><span class="line">hexo g <span class="comment">#構建靜態頁面</span></span><br><span class="line">hexo s <span class="comment">#開啓服務器</span></span><br></pre></td></tr></table></figure><p>完成之後在瀏覽器輸入網址<a href="localhost:4000" target="_blank" rel="noopener">localhost:4000</a>。應該會看到生成的test頁面和hello world頁面。</p><p>hexo的<strong>目錄結構</strong>如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-- _config.yml <span class="comment">#配置文件</span></span><br><span class="line">|-- package.json <span class="comment">#hexo的依賴，插件信息也保存在這文件內</span></span><br><span class="line">|-- scaffolds <span class="comment">#標準模板，一般不需要關心</span></span><br><span class="line">|-- <span class="built_in">source</span> <span class="comment">#資源目錄，文章與各種附件也都保存在這</span></span><br><span class="line">   |-- _posts <span class="comment">#文章文件夾</span></span><br><span class="line">|-- themes <span class="comment">#主題</span></span><br><span class="line">|-- .gitignore <span class="comment">#git同步的時候忽略的目錄與文件</span></span><br><span class="line">|-- public <span class="comment">#生成後的靜態博客文件夾</span></span><br></pre></td></tr></table></figure><p>常用的命令有以下幾條</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br><span class="line"></span><br><span class="line">#命令简写</span><br><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g == hexo generate #生成</span><br><span class="line">hexo s == hexo server #啓動伺服器</span><br><span class="line">hexo d == hexo deploy #推送部署</span><br><span class="line"></span><br><span class="line">hexo server #Hexo監視文件變動並自動更新，無需重啓服務器</span><br><span class="line">hexo server -s #靜態模式，只監視public文件夾下的內容</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定義 IP</span><br><span class="line">hexo clean #清除緩存</span><br></pre></td></tr></table></figure><p>而_posts內.md文件的文章大致結構如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: [標題]</span><br><span class="line">date: [YYYY-MM-DD HH：MM：SS]</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>[tag1]</span><br><span class="line"><span class="bullet">- </span>[tag2]</span><br><span class="line"><span class="bullet">- </span>[tag3]</span><br><span class="line">categories: [分類]</span><br><span class="line">---</span><br><span class="line">[文章內容]</span><br></pre></td></tr></table></figure><h2 id="推送網站"><a href="#推送網站" class="headerlink" title="推送網站"></a>推送網站</h2><p>剛剛介紹文件目錄結構提到有一個_config.yml配置文件，使用atom或你喜歡的編輯器打開這個文件，在最後幾行會看到以下字樣</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="comment">#推送類型</span></span><br><span class="line"><span class="attr">  repo:</span></span><br></pre></td></tr></table></figure><p>這個就是hexo自帶的網站推送功能的配置行，這次我使用Github中自帶的Github Pages當作網頁端，而這需要安裝hexo的git推送插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然後修改_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">yourname.github.com</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>可以看<a href>這裏</a>查看如何配置Github以實現二級域名訪問</p><p>其他的部署渠道可以在<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">這裏</a>查看如何部署</p><p>修改完_config.yml後，分別輸入以下三條命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然後你的第一次部署便完成了。訪問 yourname.github.com，應該可以看到你部署的hexo博客了。</p><p>接下來要處理的是<strong>如何同步多端</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;舊的博客是用Typecho做的，什麼都挺好，就是這個博客沒法直接上載.md文件，備份也顯得挺麻煩。&lt;/p&gt;
&lt;p&gt;在15年的時候嘗試搭建Hexo博客，那時候的Hexo的配置流程比現在復雜特別多。現在比之前方便多了，想着要不要遷移到Hexo。&lt;/p&gt;
    
    </summary>
    
      <category term="技術相關" scheme="https://cupkappu.github.io/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="Hexo" scheme="https://cupkappu.github.io/tags/Hexo/"/>
    
      <category term="博客" scheme="https://cupkappu.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Github" scheme="https://cupkappu.github.io/tags/Github/"/>
    
  </entry>
  
</feed>
