<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木不子的窒息小茶室</title>
  
  <subtitle>技術、音樂、影視、動畫的茶室</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.kappu.ml/"/>
  <updated>2020-10-14T05:00:27.000Z</updated>
  <id>https://www.kappu.ml/</id>
  
  <author>
    <name>木不子</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>科学上网、翻墙|仅需一台VPS，让宽带拥有公网固定IP、翻越GFW|软路由网关</title>
    <link href="https://www.kappu.ml/2020/10/14/2020-10-14-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E3%80%81%E7%BF%BB%E5%A2%99%E4%BB%85%E9%9C%80%E4%B8%80%E5%8F%B0VPS%EF%BC%8C%E8%AE%A9%E5%AE%BD%E5%B8%A6%E6%8B%A5%E6%9C%89%E5%85%AC%E7%BD%91%E5%9B%BA%E5%AE%9AIP%E3%80%81%E7%BF%BB%E8%B6%8AGFW%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/"/>
    <id>https://www.kappu.ml/2020/10/14/2020-10-14-科学上网、翻墙仅需一台VPS，让宽带拥有公网固定IP、翻越GFW软路由网关/</id>
    <published>2020-10-13T17:58:46.000Z</published>
    <updated>2020-10-14T05:00:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本教程会介绍VPN技术，并提到VPN在翻越GFW时会遇到的一些问题，然后会提供一种更加安全的、跨越GFW组建VPN二层网络的思路</strong></p></blockquote><h2 id="0-GFW能管控什么？GFW如何对网络进行管控？"><a href="#0-GFW能管控什么？GFW如何对网络进行管控？" class="headerlink" title="0. GFW能管控什么？GFW如何对网络进行管控？"></a>0. GFW能管控什么？GFW如何对网络进行管控？</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>这是你的家庭网络架构，你的笔记本电脑会连接到你的无线路由器，通过防火墙后连接上互联网。</p><p><img src="/image/image-20201013224606757.png" alt="image-20201013224606757"></p><p><em>图片来源：Draw.io</em></p><p>你发送的每个对外访问的数据包都会发送到你的家庭网关，通过电信商提供的宽带服务接入互联网后，家庭网关会根据路由表，向路由表指示的网关询问IP地址是否可以到达。再上一层的网关也会执行同样的操作，直到最后访问到你需要访问的IP地址。</p><p><img src="/image/image-20201013233902331.png" alt="image-20201013233902331"></p><p>有时候，应用访问的是域名。设备在接收到访问域名的请求后会向DNS服务器查询域名的IP地址，然后才会进行上面一套流程。</p><p>假设你要访问Youtube，域名是<code>youtube.com</code>在不考虑防火墙的情况下，你的电脑会先向DNS询问<code>youtube.com</code>的IP地址（A记录）。</p><p><img src="/image/image-20201013235429516.png" alt="image-20201013235429516"></p><p><em>图片来源：GFW是如何阻止我们访问国外网站的？（<a href="https://www.youtube.com/watch?v=f6dFKFeFntw）" target="_blank" rel="noopener">https://www.youtube.com/watch?v=f6dFKFeFntw）</a></em></p><p>DNS服务器会返回一个域名的IP地址，然后设备会根据这个IP地址，将数据包发送到网关，最后访问到目标IP地址。</p><p><img src="/image/image-20201013235521850.png" alt="image-20201013235521850"></p><p><em>图片来源：GFW是如何阻止我们访问国外网站的？（<a href="https://www.youtube.com/watch?v=f6dFKFeFntw）" target="_blank" rel="noopener">https://www.youtube.com/watch?v=f6dFKFeFntw）</a></em></p><h3 id="GFW"><a href="#GFW" class="headerlink" title="GFW"></a>GFW</h3><p>如果说你在中国大陆地区，你接入的网络架构应该是这样的。</p><p><img src="/image/image-20201013232524535.png" alt="image-20201013232524535"></p><p>你的设备询问访问国内的IP地址，运营商的网关会根据路由表自动路由到不同的网关。若访问海外的地址，运营商会将你的数据包转发到GFW里面进行审查，数据包通过审查则继续转发到海外的网关，未通过审查的数据包会被丢弃、替换、攻击等。<em>（维基百科：防火长城）</em></p><p>现阶段，GFW会对以下的内容，在技术层面上进行网络攻击。</p><table><thead><tr><th>内容</th><th>封禁原因</th><th>技术手段</th></tr></thead><tbody><tr><td>被屏蔽的域名</td><td>网站不符合言论审查要求</td><td>DNS污染</td></tr><tr><td>被屏蔽的IP</td><td>IP提供不符合言论审查要求的服务</td><td>TCP阻断重置、UDP严格限速、黑洞路由、端口封锁</td></tr><tr><td>明文关键词</td><td>关键词不符合言论审查要求</td><td>TCP阻断重置</td></tr><tr><td>VPN流量</td><td>防范个人/团体不遵守言论审查</td><td>TCP阻断重置、UDP严格限速、黑洞路由、端口封锁</td></tr></tbody></table><p>现在近乎明确会被GFW阻断、屏蔽、封禁的，数据包直接标识自己是隧道数据包的VPN有以下几种。</p><blockquote><p>PPTP、L2TP、OpenVPN over UDP</p></blockquote><p>有机会被屏蔽、限速、黑洞的VPN有以下几种。</p><blockquote><p>Wireguard、GRE、IPSec、IKEv2、SSTP、Anyconnect</p></blockquote><p>有较大机会被封锁的传输层以上的代理协议有以下几种。</p><blockquote><p>SSH、Socks、HTTP代理、ShadowsocksR、Tor</p></blockquote><h2 id="1-现阶段什么翻墙方式较难被封锁"><a href="#1-现阶段什么翻墙方式较难被封锁" class="headerlink" title="1. 现阶段什么翻墙方式较难被封锁"></a>1. 现阶段什么翻墙方式较难被封锁</h2><p>现阶段较为隐蔽的VPN和代理协议，根据底层传输层特征，隐蔽性由高至低排列（仅代表笔者观点）</p><table><thead><tr><th>传输层特征</th><th>VPN或代理类型</th></tr></thead><tbody><tr><td>Websocks-TLS/HTTPS</td><td><a href="https://github.com/unbit/vpn-ws" target="_blank" rel="noopener">VPN-WS</a>、V2ray-WSS、Trojan-WSS、GOST-WSS、Shadowsocks with Obfs WSS、HTTPS</td></tr><tr><td>TLS</td><td>SSL VPN、V2ray-TLS、Trojan、GOST、Socks over TLS、Shadowsocks with Obfs TLS</td></tr><tr><td>QUIC</td><td>V2ray-QUIC、GOST-QUIC</td></tr><tr><td>KCP</td><td>V2ray-KCP、GOST-KCP</td></tr><tr><td>无特征协议</td><td>V2ray-Vmess、Shadowsocks</td></tr><tr><td>P2P网络</td><td>I2P</td></tr></tbody></table><p><em>隐蔽性与性能、安全性无关</em></p><p>当下资料显示，GFW对待HTTPS和SSL/TLS流量最为宽松。根据<a href="https://medium.com/@programthink/2019%E5%B9%B46%E6%9C%88%E7%BF%BB%E5%A2%99%E5%BF%AB%E6%8A%A5-%E5%85%BC%E8%B0%88%E7%94%A8-i2p-%E7%AA%81%E7%A0%B4%E5%B0%81%E9%94%81-f460a86f154f" target="_blank" rel="noopener">《2019年6月翻墙快报》</a>，GFW对于基于无加密Socks代理与VPN较为敏感，而对于非HTTPS、WSS的流量会随机阻断。在去年6月敏感时间，V2ray搭建在基于HTTPS的Websocket TLS传输层上、或是别的代理协议通过HTTPS Tunnel进行传输，都不会被GFW过度干扰。而I2P由于自身坚挺的P2P技术，只要即时补种可以作为轻度使用的良好方案。在<a href="https://groups.google.com/g/fqlt/c/axPUoCDa_rE/m/UCSVxS2SCAAJ" target="_blank" rel="noopener">特殊情况</a>下，WSS传输层会被限速，但还尚未被完全封锁。<strong>可以总结，基于HTTPS传输层的代理和VPN是现行使用公网翻墙的最佳方法。</strong></p><blockquote><p>后续更新</p></blockquote><hr><ol><li><p>维基百科：防火长城，<a href="https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E，2020年10月13日读取。" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E，2020年10月13日读取。</a></p></li><li><p>GFW的封杀手段以及常见的翻墙手段，<a href="https://note.hzy.pw/1798.html，2020年10月13日读取。" target="_blank" rel="noopener">https://note.hzy.pw/1798.html，2020年10月13日读取。</a></p></li><li><p>《2019年6月翻墙快报》，2019年7月11日，<a href="https://medium.com/@programthink/2019%E5%B9%B46%E6%9C%88%E7%BF%BB%E5%A2%99%E5%BF%AB%E6%8A%A5-%E5%85%BC%E8%B0%88%E7%94%A8-i2p-%E7%AA%81%E7%A0%B4%E5%B0%81%E9%94%81-f460a86f154f，2020年10月14日读取。" target="_blank" rel="noopener">https://medium.com/@programthink/2019%E5%B9%B46%E6%9C%88%E7%BF%BB%E5%A2%99%E5%BF%AB%E6%8A%A5-%E5%85%BC%E8%B0%88%E7%94%A8-i2p-%E7%AA%81%E7%A0%B4%E5%B0%81%E9%94%81-f460a86f154f，2020年10月14日读取。</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本教程会介绍VPN技术，并提到VPN在翻越GFW时会遇到的一些问题，然后会提供一种更加安全的、跨越GFW组建VPN二层网络的思路&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0-GFW能管控什么？GFW如何
      
    
    </summary>
    
      <category term="技術相關" scheme="https://www.kappu.ml/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="翻墙" scheme="https://www.kappu.ml/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="代理" scheme="https://www.kappu.ml/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="隧道" scheme="https://www.kappu.ml/tags/%E9%9A%A7%E9%81%93/"/>
    
      <category term="VPN" scheme="https://www.kappu.ml/tags/VPN/"/>
    
      <category term="组网" scheme="https://www.kappu.ml/tags/%E7%BB%84%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>试玩TUN/TAP over GOST-WSS</title>
    <link href="https://www.kappu.ml/2020/10/11/GOST_Startup/"/>
    <id>https://www.kappu.ml/2020/10/11/GOST_Startup/</id>
    <published>2020-10-11T10:39:08.000Z</published>
    <updated>2020-10-11T10:51:39.939Z</updated>
    
    <content type="html"><![CDATA[<p>在上个星期我试着搭建了<a href="https://blog.kifuko.moe/2020/09/27/Wireguard-over-V2ray/" target="_blank" rel="noopener">Wireguard over Vless-Websocket</a>，稳定性虽然不错但是性能实在是太差了，实在是不适合放在性能比较低下的NAT VPS上做中转之类的操作。即便是树莓派4b，跑满100M带宽也需要吃掉超过100%的CPU。再加上V2ray的功能是专门为了一站式应用层穿透代理设计的，端口转发只是V2ray自带的一个额外的功能罢了，并不是他的核心功能。由于没有研究过V2ray的代码也无法判断在跑端口转发的时候会不会运行了一些与端口转发无关的代码占用资源，不过最近看到了<a href="https://github.com/v2ray/discussion/issues/454" target="_blank" rel="noopener">v2ray/discussion里面的一则讨论</a>，测试显示GOST的ws+tls速度比v2ray快了一倍有余。</p><p>本篇将尝试使用GOST直接搭建使用Websocket-TLS传输层隧道进行通讯的TAP VPN，实现穿隧与组网。为了理解本篇内容，读者最少需要了解基本的网络、路由原理，需要懂得基础的OSI模型。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>这次使用一台内地的NAT VPS与日本NTT VPS进行测试，使用GOST创建TAP设备，底层传输层走Websocket-TLS协议，让协议可实现套CDN等操作。</p><p>先在服务端和客户端下载GOST，安装到<code>/usr/local/bin</code>里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://github.com/ginuerzh/gost/releases/download/v2.11.1/gost-linux-amd64-2.11.1.gz | gzip -dc &gt; /usr/local/bin/gost &amp;&amp; chmod +x /usr/local/bin/gost</span><br></pre></td></tr></table></figure><p>在服务端安装caddy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://git.io/vra5C -O - -o /dev/null|bash</span><br></pre></td></tr></table></figure><p>在服务端配置Systemd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; gost.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Gost Proxy</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/local/bin/gost -L tap://127.0.0.1:8421 -L relay+ws://user:pass@127.0.0.1:48101?path=/gost</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>上面的user和pass修改一下，path的意思是路径。然后8421是TAP协议设备的端口，48101是relay+ws的端口。</p><p>配置Caddy。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/Caddyfile &lt;&lt; EOF</span><br><span class="line">serverdomain &#123;</span><br><span class="line">        gzip</span><br><span class="line">        tls example@mail.com</span><br><span class="line">        log /var/log/caddy.log</span><br><span class="line">        proxy /gost localhost:48101 &#123;</span><br><span class="line">                websocket</span><br><span class="line">                header_upstream -Origin</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>启动Caddy和GOST。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">caddy start</span><br><span class="line"></span><br><span class="line">systemctl start gost</span><br><span class="line">systemctl enable gost</span><br></pre></td></tr></table></figure><p>配置网桥并将GOST的TAP设备桥接到网桥上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip link add taps_bridge type bridge</span><br><span class="line">ip link set taps_bridge up</span><br><span class="line">ip address add 100.66.0.1/24 dev taps_bridge</span><br><span class="line">ip link set tap0 master taps_bridge</span><br></pre></td></tr></table></figure><p>在客户端配置GOST的systemd。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; gost.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Gost Proxy</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/local/bin/gost -L tap://:8421/127.0.0.1:8421?net=100.66.0.2/24 -F relay+wss://user:pass@serverdomain:443?path=/gost</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>然后在客户端启动GOST服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable gost</span><br><span class="line">systemctl start gost</span><br></pre></td></tr></table></figure><p>到这一步应该已经将GOST的TAP over WSS搭建完成，若你想套CDN之类的可以自己操作看看。</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>上面搭建的是wss协议的GOST，下面会一并测试TAP设备在TLS、KCP、QUIC传输层协议上的表现。</p><p>香港HKT搭建的iperf3服务器，宿迁联通百兆宽带，性能如下。</p><table><thead><tr><th>协议</th><th>上传</th><th>下载</th></tr></thead><tbody><tr><td>Direct</td><td>16.4Mbps</td><td>3.22Mbps</td></tr><tr><td>TLS</td><td>14.9Mbps</td><td>6.87Mbps</td></tr><tr><td>KCP</td><td>7.92Mbps</td><td>1.39Mbps</td></tr><tr><td>QUIC</td><td>8.66Mbps</td><td>8.20Mbps</td></tr><tr><td>Relay+MTLS</td><td>12.6Mbps</td><td>9.42Mbps</td></tr><tr><td>Relay+KCP</td><td>13.1Mbps</td><td>11.6Mbps</td></tr></tbody></table><p>实测下来性能还不如GRE over Wireguard over Vless-WSS，不知道纯中转性能如何，之后有机会再更新吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在上个星期我试着搭建了&lt;a href=&quot;https://blog.kifuko.moe/2020/09/27/Wireguard-over-V2ray/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wireguard over Vless-Websock
      
    
    </summary>
    
      <category term="技術相關" scheme="https://www.kappu.ml/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="翻墙" scheme="https://www.kappu.ml/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="代理" scheme="https://www.kappu.ml/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="隧道" scheme="https://www.kappu.ml/tags/%E9%9A%A7%E9%81%93/"/>
    
      <category term="VPN" scheme="https://www.kappu.ml/tags/VPN/"/>
    
      <category term="组网" scheme="https://www.kappu.ml/tags/%E7%BB%84%E7%BD%91/"/>
    
      <category term="GOST" scheme="https://www.kappu.ml/tags/GOST/"/>
    
      <category term="游戏加速" scheme="https://www.kappu.ml/tags/%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F/"/>
    
  </entry>
  
  <entry>
    <title>Wireguard over Vmess/Vless - 安全隐蔽且容易配置的VPN三层隧道</title>
    <link href="https://www.kappu.ml/2020/09/27/Wireguard-over-V2ray/"/>
    <id>https://www.kappu.ml/2020/09/27/Wireguard-over-V2ray/</id>
    <published>2020-09-27T11:03:55.000Z</published>
    <updated>2020-09-27T12:54:39.966Z</updated>
    
    <content type="html"><![CDATA[<p>老早就有这个想法了，由于v2ray只是一个四层代理，相比VPN三层代理不够透明，所以有用VPN的倾向。</p><p>但是VPN协议早已被GFW摸得清清楚楚，断流、QoS管控绝对不会手软。所以肯定需要一个隧道来对接VPN协议。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>选用Wireguard单纯是因为Linux原生支持Wireguard，配置相比于别的VPN协议实在是方便太多而且性能相对最好，而且由于是三层协议，还可以在这上面再添加GRE套娃变成GRE over Wireguard over Vmess….</p><p>但是无论是GFW对于Wireguard的识别，还是ISP对于udp流量的QoS管控限制，都让裸Wireguard变得难以使用。所以这里还需要一个隧道，让数据包表层看起来安稳一些，不会受到ISP的特别关照。</p><p>在穿墙隧道这一方面，现阶段做的比较完善，且最高能以应用层穿隧的协议，估计V2ray的Vmess/Vless协议算是做的最为完善和成熟的了。</p><blockquote><p>其实也有想过用GOST进行穿隧，据说性能更好。但GOST的配置方式我不熟悉，配置总是不成功。有时间研究一下再码一篇。</p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>先设定有两台机子，一台是Server，一台是Client。</p><p>Server的对外IP是10.100.0.1，Client的对外IP是10.100.0.2。</p><p>V2ray套件中有一个Dokodemo-door入站协议，可以监听任意端口进行转发，并且支持在V2ray中路由。</p><p>先在Server架设好V2ray服务端，为了演示方便先使用普通的Vmess TCP协议。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// vmess TCP</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"inbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      "port": 16823, // 服务器监听端口</span><br><span class="line">      "protocol": "vmess",    // 主传入协议</span><br><span class="line">      "settings": &#123;</span><br><span class="line">        "clients": [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"b831381d-6324-4d53-ad4f-8cda48b30811"</span>, </span><br><span class="line">            <span class="attr">"alterId"</span>: <span class="number">64</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  "outbounds": [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在Server再架设一个Wireguard接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">PrivateKey = 2GjqFPL8IXKs3fECd4/FO6M1XnLFw4N8uHSzT9i62mc=</span><br><span class="line">Address = 10.101.0.1/32</span><br><span class="line">ListenPort = 10000 </span><br><span class="line">#监听10000端口</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = EZ/WK+xSI5cIL3diRAI2K0LVWefMiky3a3MxYBaL5As=</span><br><span class="line">AllowedIPs = 10.101.0.2/32</span><br></pre></td></tr></table></figure><p>在Client里面安装V2ray，配置基础的Outbounds和Dokodemo-door转发。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"inbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"tag"</span>:<span class="string">"wireguard"</span>,</span><br><span class="line">      <span class="attr">"port"</span>:<span class="number">10000</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>:<span class="string">"dokodemo-door"</span>,</span><br><span class="line">        <span class="attr">"settings"</span>:&#123;  </span><br><span class="line">          <span class="attr">"address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">          <span class="attr">"port"</span>:<span class="number">10000</span>,</span><br><span class="line">          <span class="attr">"network"</span>:<span class="string">"udp"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"outbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"tag"</span>:<span class="string">"proxy"</span>,</span><br><span class="line">      "protocol": "vmess", // 出口协议</span><br><span class="line">      "settings": &#123;</span><br><span class="line">        "vnext": [</span><br><span class="line">          &#123;</span><br><span class="line">            "address": "10.100.0.1", // 服务器地址</span><br><span class="line">            "port": 16823,  // 服务器端口</span><br><span class="line">            "users": [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"id"</span>: <span class="string">"b831381d-6324-4d53-ad4f-8cda48b30811"</span>,</span><br><span class="line">                <span class="attr">"alterId"</span>: <span class="number">64</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  "routing":&#123;  </span><br><span class="line">    "rules":[  </span><br><span class="line">      &#123;  </span><br><span class="line">        <span class="attr">"type"</span>:<span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"inboundTag"</span>:[  </span><br><span class="line">          <span class="string">"wireguard"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"outboundTag"</span>:<span class="string">"proxy"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置后，Client本机的10000端口便映射到Server的10000端口。接下来配置Client的Wireguard接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">PrivateKey = wAuG/N59IEqdQT42rTi8bfTP00ygLQMe6Rjl85aSE1k=</span><br><span class="line">Address = 10.101.0.2/32</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = PpE7xyUVEXfccO3GrFUad36s8WG5frJQTNd499oceHI=</span><br><span class="line">AllowedIPs = 10.101.0.1/32</span><br><span class="line">Endpoint = 127.0.0.1:10000</span><br></pre></td></tr></table></figure><p>配置完毕后，将Server和Client总共4个服务全部启动即可</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>用Hyper-V开两台Ubuntu做实验，搭建虚拟机的过程就不记录了。设置好ip为上面规划的ip，搭完之后安装Wireguard与V2ray。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">apt update</span><br><span class="line">apt install wireguard -y</span><br><span class="line">curl https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh | bash</span><br><span class="line">curl https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-dat-release.sh | bash</span><br></pre></td></tr></table></figure><p>然后编辑文件，留意新版的v2ray配置文件路径是<code>/usr/local/etc/v2ray/config.json</code>，上面已经介绍过如何配置了，这里不再复述。</p><p>Wireguard over Vmess挂完之后安装个iperf测试一下速度吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Server</span><br><span class="line">apt install iperf</span><br><span class="line">iperf -s</span><br><span class="line"># Client</span><br><span class="line">apt install iperf</span><br><span class="line">iperf -c 10.101.0.1</span><br></pre></td></tr></table></figure><h3 id="实验测试结果"><a href="#实验测试结果" class="headerlink" title="实验测试结果"></a>实验测试结果</h3><h4 id="iperf"><a href="#iperf" class="headerlink" title="iperf"></a>iperf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># Direct</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Server listening on TCP port 5001</span><br><span class="line">TCP window size:  128 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  4] local 10.100.0.1 port 5001 connected with 10.100.0.2 port 53168</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  4]  0.0-10.0 sec  22.2 GBytes  19.0 Gbits/sec</span><br><span class="line"></span><br><span class="line"># Wireguard only</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Server listening on TCP port 5001</span><br><span class="line">TCP window size:  128 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  4] local 10.101.0.1 port 5001 connected with 10.101.0.2 port 55878</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  4]  0.0-10.0 sec  2.33 GBytes  1.99 Gbits/sec</span><br><span class="line"></span><br><span class="line"># Wireguard over Vmess-TCP</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Server listening on TCP port 5001</span><br><span class="line">TCP window size:  128 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  4] local 10.101.0.1 port 5001 connected with 10.101.0.2 port 55868</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  4]  0.0-10.0 sec   177 MBytes   148 Mbits/sec</span><br><span class="line"></span><br><span class="line"># Wireguard over Vmess-WebSocket</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Server listening on TCP port 5001</span><br><span class="line">TCP window size:  128 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  4] local 10.101.0.1 port 5001 connected with 10.101.0.2 port 56038</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  4]  0.0-10.0 sec   147 MBytes   123 Mbits/sec</span><br><span class="line"></span><br><span class="line"># Wireguard over Vmess-WebSocket-TLS</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Server listening on TCP port 5001</span><br><span class="line">TCP window size:  128 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  4] local 10.101.0.1 port 5001 connected with 10.101.0.2 port 56338</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  4]  0.0-10.0 sec   138 MBytes   116 Mbits/sec</span><br><span class="line"></span><br><span class="line"># Wireguard over Vless-only</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Client connecting to 10.101.0.1, TCP port 5001</span><br><span class="line">TCP window size: 45.0 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  3] local 10.101.0.2 port 56032 connected with 10.101.0.1 port 5001</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  3]  0.0-10.1 sec   122 KBytes  98.5 Kbits/sec</span><br><span class="line"></span><br><span class="line"># Wireguard over Vless-WebSocket</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Server listening on TCP port 5001</span><br><span class="line">TCP window size:  128 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  4] local 10.101.0.1 port 5001 connected with 10.101.0.2 port 56016</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  4]  0.0- 7.8 sec   256 KBytes   268 Kbits/sec</span><br><span class="line"></span><br><span class="line"># Wireguard over Vless-WebSocket-TLS</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Client connecting to 10.101.0.1, TCP port 5001</span><br><span class="line">TCP window size: 45.0 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  3] local 10.101.0.2 port 56330 connected with 10.101.0.1 port 5001</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  3]  0.0-10.0 sec  33.1 MBytes  27.7 Mbits/sec</span><br></pre></td></tr></table></figure><table><thead><tr><th>协议</th><th>iperf速度</th></tr></thead><tbody><tr><td>Direct</td><td>19.0 Gbits/sec</td></tr><tr><td>Wireguard only</td><td>1.99 Gbits/sec</td></tr><tr><td>Wireguard over Vmess-TCP</td><td>148 Mbits/sec</td></tr><tr><td>Wireguard over Vmess-WebSocket</td><td>123 Mbits/sec</td></tr><tr><td>Wireguard over Vmess-WebSocket-TLS</td><td>116 Mbits/sec</td></tr><tr><td>Wireguard over Vless-Only</td><td>98.5 Kbits/sec</td></tr><tr><td>Wireguard over Vless-WebSocket</td><td>268 Kbits/sec</td></tr><tr><td>Wireguard over Vless-WebSocket-TLS</td><td>27.7 Mbits/sec</td></tr></tbody></table><p>不知道为什么，一挂上Vless协议，iperf速度就急剧下降。正常使用没什么问题。</p><h4 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># Direct</span><br><span class="line">--- 10.100.0.1 ping statistics ---</span><br><span class="line">89 packets transmitted, 89 received, 0% packet loss, time 90096ms</span><br><span class="line">rtt min/avg/max/mdev = 0.251/0.325/0.417/0.041 ms</span><br><span class="line"></span><br><span class="line"># Wireguard only</span><br><span class="line">--- 10.101.0.1 ping statistics ---</span><br><span class="line">86 packets transmitted, 86 received, 0% packet loss, time 87045ms</span><br><span class="line">rtt min/avg/max/mdev = 0.348/0.471/0.664/0.061 ms</span><br><span class="line"></span><br><span class="line"># Wireguard over Vmess-TCP</span><br><span class="line">--- 10.101.0.1 ping statistics ---</span><br><span class="line">59 packets transmitted, 59 received, 0% packet loss, time 58303ms</span><br><span class="line">rtt min/avg/max/mdev = 0.818/0.994/1.427/0.103 ms</span><br><span class="line"></span><br><span class="line"># Wireguard over Vmess-WebSocket</span><br><span class="line">--- 10.101.0.1 ping statistics ---</span><br><span class="line">57 packets transmitted, 57 received, 0% packet loss, time 56184ms</span><br><span class="line">rtt min/avg/max/mdev = 0.875/1.092/4.503/0.464 ms</span><br><span class="line"></span><br><span class="line"># Wireguard over Vmess-WebSocket-TLS</span><br><span class="line">--- 10.101.0.1 ping statistics ---</span><br><span class="line">58 packets transmitted, 58 received, 0% packet loss, time 57295ms</span><br><span class="line">rtt min/avg/max/mdev = 0.821/1.037/1.775/0.158 ms</span><br><span class="line"></span><br><span class="line"># Wireguard over Vless-Only</span><br><span class="line">--- 10.101.0.1 ping statistics ---</span><br><span class="line">58 packets transmitted, 50 received, 13.7931% packet loss, time 57710ms</span><br><span class="line">rtt min/avg/max/mdev = 0.774/0.939/1.678/0.129 ms</span><br><span class="line"></span><br><span class="line"># Wireguard over Vless-WebSocket</span><br><span class="line">--- 10.101.0.1 ping statistics ---</span><br><span class="line">56 packets transmitted, 55 received, 1.78571% packet loss, time 55390ms</span><br><span class="line">rtt min/avg/max/mdev = 0.734/0.963/1.339/0.100 ms</span><br><span class="line"></span><br><span class="line"># Wireguard over Vless-WebSocket-TLS</span><br><span class="line">--- 10.101.0.1 ping statistics ---</span><br><span class="line">58 packets transmitted, 58 received, 0% packet loss, time 57248ms</span><br><span class="line">rtt min/avg/max/mdev = 0.830/1.024/1.252/0.090 ms</span><br></pre></td></tr></table></figure><table><thead><tr><th>协议</th><th>延迟</th></tr></thead><tbody><tr><td>Direct</td><td>0.325 ms</td></tr><tr><td>Wireguard only</td><td>0.471 ms</td></tr><tr><td>Wireguard over Vmess-TCP</td><td>0.994 ms</td></tr><tr><td>Wireguard over Vmess-WebSocket</td><td>1.092 ms</td></tr><tr><td>Wireguard over Vmess-WebSocket-TLS</td><td>1.037 ms</td></tr><tr><td>Wireguard over Vless-Only</td><td>0.939 ms</td></tr><tr><td>Wireguard over Vless-WebSocket</td><td>0.963 ms</td></tr><tr><td>Wireguard over Vless-WebSocket-TLS</td><td>1.024 ms</td></tr></tbody></table><p>可以见到环回的延迟表现均可以接受。需要注意的是，第一个包延迟最高可以达到50ms，这可能是因为Vmess、Vless和Wireguard都需要握手后才能进行通讯。</p><p>本机环回测试效果一般，接下来实装到香港HKT家宽线路，尝试连接稳定性和速度。</p><h3 id="实装测试结果"><a href="#实装测试结果" class="headerlink" title="实装测试结果"></a>实装测试结果</h3><p><strong><em>使用50M宽带与HKT千兆家宽测试</em></strong></p><h4 id="PING"><a href="#PING" class="headerlink" title="PING"></a>PING</h4><table><thead><tr><th>协议</th><th>延迟</th></tr></thead><tbody><tr><td>Direct</td><td>24.242 ms</td></tr><tr><td>Wireguard only</td><td>38.591 ms</td></tr><tr><td>Wireguard over Vmess-TCP</td><td>39.673 ms</td></tr><tr><td>Wireguard over Vmess-WebSocket</td><td>39.762 ms</td></tr><tr><td>Wireguard over Vmess-WebSocket-TLS</td><td>39.311 ms</td></tr><tr><td>Wireguard over Vless-Only</td><td>39.579 ms</td></tr><tr><td>Wireguard over Vless-WebSocket</td><td>39.865 ms</td></tr><tr><td>Wireguard over Vless-WebSocket-TLS</td><td>34.411 ms</td></tr></tbody></table><h4 id="Iperf测速"><a href="#Iperf测速" class="headerlink" title="Iperf测速"></a>Iperf测速</h4><table><thead><tr><th>协议</th><th>iperf速度</th></tr></thead><tbody><tr><td>Direct</td><td>6.24 Mbits/sec</td></tr><tr><td>Wireguard only</td><td>3.64 Mbits/sec</td></tr><tr><td>Wireguard over Vmess-TCP</td><td>3.32 Mbits/sec</td></tr><tr><td>Wireguard over Vmess-WebSocket</td><td>2.75 Mbits/sec</td></tr><tr><td>Wireguard over Vmess-WebSocket-TLS</td><td>2.39 Mbits/sec</td></tr><tr><td>Wireguard over Vless-Only</td><td>556 Kbits/sec</td></tr><tr><td>Wireguard over Vless-WebSocket</td><td>554 Kbits/sec</td></tr><tr><td>Wireguard over Vless-WebSocket-TLS</td><td>560 Kbits/sec</td></tr></tbody></table><p>iperf怪怪的，有时间再做个speedtest测试吧</p><h2 id="GRE-over-Wireguard-over-Vless-WebsocketSecurity-Web-over-Cloudflare-CDN-with-Web"><a href="#GRE-over-Wireguard-over-Vless-WebsocketSecurity-Web-over-Cloudflare-CDN-with-Web" class="headerlink" title="GRE over Wireguard over Vless-WebsocketSecurity-Web over Cloudflare CDN with Web"></a>GRE over Wireguard over Vless-Websocket<strong>S</strong>ecurity-Web over Cloudflare CDN with Web</h2><p>这行字和咒语一样……但是如此组合的隧道不但可以实现极为稳定的代理功能，由于GRE是二层代理还能实现传输广播包，实现内网的互联互通，甚至可以设置策略让所有接入的节点根据目的IP走不同的出口。而且由于使用了Web作为外层的伪装，符合现在应对GFW主动探测的主流方案。</p><p>这里先不说明如何设置OSPF实现自动路由，只关注如何实现<strong>GRE over Wireguard over Vless-WebsocketSecurity over Cloudflare CDN with Web</strong>。</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><h4 id="Vless-WebsocketSecurity-over-Cloudflare-CDN-with-Web"><a href="#Vless-WebsocketSecurity-over-Cloudflare-CDN-with-Web" class="headerlink" title="Vless-WebsocketSecurity over Cloudflare CDN with Web"></a>Vless-WebsocketSecurity over Cloudflare CDN with Web</h4><p>由底层开始设置，先在Cloudflare里面把域名指向自己的VPS并且开启CDN代理，然后回到VPS里面安装V2ray与Caddy。<strong>上方原理说明已经描述如何安装V2ray</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 安装Caddy</span><br><span class="line"></span><br><span class="line">wget -P /usr/local/bin &quot;https://daofa.cyou/c1/caddy.tar&quot; &amp;&amp; \</span><br><span class="line">tar -xvf /usr/local/bin/caddy.tar -C /usr/local/bin &amp;&amp; \</span><br><span class="line">rm /usr/local/bin/caddy.tar &amp;&amp; \</span><br><span class="line">chown root:root /usr/local/bin/caddy &amp;&amp; \</span><br><span class="line">chmod 755 /usr/local/bin/caddy &amp;&amp; \</span><br><span class="line">setcap &apos;cap_net_bind_service=+ep&apos; /usr/local/bin/caddy &amp;&amp; \</span><br><span class="line">mkdir /etc/caddy &amp;&amp; \</span><br><span class="line">mkdir /etc/ssl/caddy &amp;&amp; \</span><br><span class="line">chown -R root:root /etc/caddy &amp;&amp; \</span><br><span class="line">chown -R root:www-data /etc/ssl/caddy &amp;&amp; \</span><br><span class="line">chmod 770 /etc/ssl/caddy &amp;&amp; \</span><br><span class="line">touch /var/log/caddy.log &amp;&amp; \</span><br><span class="line">chown root:www-data /var/log/caddy.log &amp;&amp; \</span><br><span class="line">chmod 770 /var/log/caddy.log &amp;&amp; \</span><br><span class="line">mkdir -p /var/www/html &amp;&amp; \</span><br><span class="line">chown -R www-data:www-data /var/www &amp;&amp; \</span><br><span class="line">touch /etc/caddy/Caddyfile</span><br></pre></td></tr></table></figure><p>配置V2ray服务端，与上方原理说明的配置文件相似，只是将Vmess改成了Vless然后添加了WS协议。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;inbounds&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;port&quot;: 16823, // 服务器监听端口</span><br><span class="line">      &quot;protocol&quot;: &quot;vless&quot;,    // 主传入协议</span><br><span class="line">      &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;decryption&quot;: &quot;none&quot;,</span><br><span class="line">        &quot;clients&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;id&quot;: &quot;b831381d-6324-4d53-ad4f-8cda48b30811&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;streamSettings&quot;: &#123;</span><br><span class="line">        &quot;network&quot;: &quot;ws&quot;</span><br><span class="line">        &quot;wsSettings&quot;: &#123;</span><br><span class="line">          &quot;path&quot;: &quot;/test&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;outbounds&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;protocol&quot;: &quot;freedom&quot;,</span><br><span class="line">      &quot;settings&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置Caddy转发Websocket请求到V2ray</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;example.com &#123; \</span><br><span class="line">        root /var/www/html \</span><br><span class="line">        gzip \</span><br><span class="line">        tls example@mail.com \</span><br><span class="line">        log /var/log/caddy.log \</span><br><span class="line">        proxy /test localhost:16823 &#123; \</span><br><span class="line">                websocket \</span><br><span class="line">                header_upstream -Origin \</span><br><span class="line">        &#125; \</span><br><span class="line">&#125; &quot; &gt; /etc/caddy/Caddyfile</span><br></pre></td></tr></table></figure><p>启动caddy和v2ray</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart v2ray &amp;&amp; systemctl restart caddy</span><br></pre></td></tr></table></figure><p>此时V2ray服务端搭建完毕。</p><h4 id="Wireguard服务接口"><a href="#Wireguard服务接口" class="headerlink" title="Wireguard服务接口"></a>Wireguard服务接口</h4><p>这个部分和上面原理说明的完全没有区别，直接按照上面的方法配置就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># /etc/wireguard/wg0.conf</span><br><span class="line">-------------------------------</span><br><span class="line">[Interface]</span><br><span class="line">PrivateKey = 2GjqFPL8IXKs3fECd4/FO6M1XnLFw4N8uHSzT9i62mc=</span><br><span class="line">Address = 10.101.0.1/32</span><br><span class="line">ListenPort = 10000 </span><br><span class="line">#监听10000端口</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = EZ/WK+xSI5cIL3diRAI2K0LVWefMiky3a3MxYBaL5As=</span><br><span class="line">AllowedIPs = 10.101.0.2/32</span><br><span class="line">-------------------------------</span><br><span class="line"># 启动接口</span><br><span class="line">wg-quick up wg0</span><br></pre></td></tr></table></figure><h4 id="GRE接口"><a href="#GRE接口" class="headerlink" title="GRE接口"></a>GRE接口</h4><p>在服务器上配置新的接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># /etc/sysconfig/network-scripts/ifcfg-tun0</span><br><span class="line">-------------------------------</span><br><span class="line">DEVICE=tun0</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">ONBOOT=no</span><br><span class="line">TYPE=GRE</span><br><span class="line">PEER_OUTER_IPADDR=10.101.0.2  #对端IP</span><br><span class="line">PEER_INNER_IPADDR=10.101.1.2</span><br><span class="line">MY_INNER_IPADDR=10.101.1.1</span><br><span class="line">-------------------------------</span><br><span class="line"></span><br><span class="line">ifup tun0</span><br></pre></td></tr></table></figure><p>此时所有的服务器端配置都设定完毕。</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h4 id="V2ray接入"><a href="#V2ray接入" class="headerlink" title="V2ray接入"></a>V2ray接入</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"inbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"tag"</span>:<span class="string">"wireguard"</span>,</span><br><span class="line">      <span class="attr">"port"</span>:<span class="number">10000</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>:<span class="string">"dokodemo-door"</span>,</span><br><span class="line">        <span class="attr">"settings"</span>:&#123;  </span><br><span class="line">          <span class="attr">"address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">          <span class="attr">"port"</span>:<span class="number">10000</span>,</span><br><span class="line">          <span class="attr">"network"</span>:<span class="string">"udp"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"outbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"tag"</span>:<span class="string">"proxy"</span>,</span><br><span class="line">      "protocol": "vless", // 出口协议</span><br><span class="line">      "settings": &#123;</span><br><span class="line">        "vnext": [</span><br><span class="line">          &#123;</span><br><span class="line">            "address": "example.com", // 服务器地址</span><br><span class="line">            "port": 443,</span><br><span class="line">            "users": [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"encryption"</span>: <span class="string">"none"</span>,</span><br><span class="line">                <span class="attr">"id"</span>: <span class="string">"b831381d-6324-4d53-ad4f-8cda48b30811"</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">      "streamSettings": &#123;</span><br><span class="line">        "network": "ws",</span><br><span class="line">        "security": "tls",</span><br><span class="line">        "tlsSettings": &#123;</span><br><span class="line">          "allowInsecure": true,</span><br><span class="line">          "serverName": "example.com"</span><br><span class="line">        &#125;,</span><br><span class="line">        "wsSettings": &#123;</span><br><span class="line">          "path": "/test",</span><br><span class="line">          "headers": &#123;</span><br><span class="line">            "Host": "example.com"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  "routing":&#123;  </span><br><span class="line">    "rules":[  </span><br><span class="line">      &#123;  </span><br><span class="line">        <span class="attr">"type"</span>:<span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"inboundTag"</span>:[  </span><br><span class="line">          <span class="string">"wireguard"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"outboundTag"</span>:<span class="string">"proxy"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Wireguard接入"><a href="#Wireguard接入" class="headerlink" title="Wireguard接入"></a>Wireguard接入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">PrivateKey = wAuG/N59IEqdQT42rTi8bfTP00ygLQMe6Rjl85aSE1k=</span><br><span class="line">Address = 10.101.0.2/32</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = PpE7xyUVEXfccO3GrFUad36s8WG5frJQTNd499oceHI=</span><br><span class="line">AllowedIPs = 10.101.0.1/32</span><br><span class="line">Endpoint = 127.0.0.1:10000</span><br></pre></td></tr></table></figure><p>然后输入<code>wg-quick up wg0</code>启动接口</p><h4 id="GRE接入"><a href="#GRE接入" class="headerlink" title="GRE接入"></a>GRE接入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># /etc/sysconfig/network-scripts/ifcfg-tun0</span><br><span class="line">-------------------------------</span><br><span class="line">DEVICE=tun0</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">ONBOOT=no</span><br><span class="line">TYPE=GRE</span><br><span class="line">PEER_OUTER_IPADDR=10.101.0.1  #对端IP</span><br><span class="line">PEER_INNER_IPADDR=10.101.1.1</span><br><span class="line">MY_INNER_IPADDR=10.101.1.2</span><br><span class="line">-------------------------------</span><br><span class="line"></span><br><span class="line">ifup tun0</span><br></pre></td></tr></table></figure><p>最后在客户端输入<code>ping 10.101.1.1</code>，如果ping通了则算是打通了GRE隧道。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;老早就有这个想法了，由于v2ray只是一个四层代理，相比VPN三层代理不够透明，所以有用VPN的倾向。&lt;/p&gt;
&lt;p&gt;但是VPN协议早已被GFW摸得清清楚楚，断流、QoS管控绝对不会手软。所以肯定需要一个隧道来对接VPN协议。&lt;/p&gt;
&lt;h2 id=&quot;原因&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="技術相關" scheme="https://www.kappu.ml/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="翻墙" scheme="https://www.kappu.ml/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="代理" scheme="https://www.kappu.ml/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="隧道" scheme="https://www.kappu.ml/tags/%E9%9A%A7%E9%81%93/"/>
    
      <category term="Wireguard" scheme="https://www.kappu.ml/tags/Wireguard/"/>
    
      <category term="V2ray" scheme="https://www.kappu.ml/tags/V2ray/"/>
    
  </entry>
  
  <entry>
    <title>雲筏科技 歐洲9元NAT-VPS Cloudflare純IPV6建站</title>
    <link href="https://www.kappu.ml/2020/09/08/%E4%BA%91%E7%AD%8F%E7%A7%91%E6%8A%80%20%E6%AC%A7%E6%B4%B29%E5%85%83NAT-VPS%E8%AF%84%E6%B5%8B/"/>
    <id>https://www.kappu.ml/2020/09/08/云筏科技 欧洲9元NAT-VPS评测/</id>
    <published>2020-09-07T16:00:00.000Z</published>
    <updated>2020-09-08T17:49:58.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="雲筏科技-歐洲9元NAT-VPS-Cloudflare純IPV6建站"><a href="#雲筏科技-歐洲9元NAT-VPS-Cloudflare純IPV6建站" class="headerlink" title="雲筏科技 歐洲9元NAT-VPS Cloudflare純IPV6建站"></a>雲筏科技 歐洲9元NAT-VPS Cloudflare純IPV6建站</h1><p><a href="https://my.cloudraft.cn/?u=954186" target="_blank" rel="noopener">雲筏科技</a>最近改版了，之前用過他家的大盤雞，現在改版後反而下架了。但是出了個9元最低配的歐洲NAT主機，還有IPv6。</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><ul><li><p>E5 1650 v3 1 x Core</p></li><li><p>1G RAM</p></li><li><p>40G系統盤+10G數據盤</p></li><li><p>網絡30Mbps（測 試中為上載限速30M）</p><ul><li><p>提供10個IPv4端口</p></li><li><p>1個IPv6地址</p><blockquote><p>實際測試<code>ifconfig</code>中，有<strong>兩個</strong>IPv6，一個是128長度的，一個是64長度的。</p><p>NAT IPv4與兩個IPv6都位於德國</p></blockquote></li></ul></li></ul><h2 id="基本測試"><a href="#基本測試" class="headerlink" title="基本測試"></a>基本測試</h2><p>使用以下腳本跑了基本測試</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- bench.sh | bash</span><br></pre></td></tr></table></figure><p>測試結果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------------------</span><br><span class="line"> CPU Model             : Intel(R) Xeon(R) CPU E5-1650 v3 @ 3.50GHz</span><br><span class="line"> CPU Cores             : 1</span><br><span class="line"> CPU Frequency         : 3491.912 MHz</span><br><span class="line"> CPU Cache             : 15360 KB</span><br><span class="line"> Total Disk            : 49.8 GB (1.7 GB Used)</span><br><span class="line"> Total Mem             : 908 MB (527 MB Used)</span><br><span class="line"> Total Swap            : 0 MB (0 MB Used)</span><br><span class="line"> System uptime         : 0 days, 0 hour 22 min</span><br><span class="line"> Load average          : 0.00, 0.02, 0.11</span><br><span class="line"> OS                    : CentOS 7.7.1908</span><br><span class="line"> Arch                  : x86_64 (64 Bit)</span><br><span class="line"> Kernel                : 3.10.0-1062.4.3.el7.x86_64</span><br><span class="line"> TCP CC                : cubic</span><br><span class="line"> Virtualization        : Hyper-V</span><br><span class="line"> Organization          : AS24940 Hetzner Online GmbH</span><br><span class="line"> Location              : Frankfurt am Main / DE</span><br><span class="line"> Region                : Hesse</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"> I/O Speed(1st run)    : 304 MB/s</span><br><span class="line"> I/O Speed(2nd run)    : 313 MB/s</span><br><span class="line"> I/O Speed(3rd run)    : 313 MB/s</span><br><span class="line"> Average I/O speed     : 310.0 MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"> Node Name        Upload Speed      Download Speed      Latency</span><br><span class="line"> Speedtest.net    29.17 Mbps        605.76 Mbps         0.94 ms</span><br><span class="line"> Beijing    CU    27.21 Mbps        355.66 Mbps         245.48 ms</span><br><span class="line"> Shanghai   CT    0.49 Mbps         25.68 Mbps          236.93 ms</span><br><span class="line"> Shanghai   CU    27.23 Mbps        381.04 Mbps         286.30 ms</span><br><span class="line"> Shenzhen   CU    28.06 Mbps        360.45 Mbps         324.82 ms</span><br><span class="line"> Shenzhen   CM    28.32 Mbps        427.49 Mbps         233.97 ms</span><br><span class="line"> Hongkong   CN    26.26 Mbps        312.03 Mbps         196.09 ms</span><br><span class="line"> Singapore  SG    23.95 Mbps        413.83 Mbps         252.61 ms</span><br><span class="line"> Tokyo      JP    27.87 Mbps        124.35 Mbps         273.54 ms</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>可以看見，這款VPS與中國聯通、中國移動的連接相當不錯，可以跑滿30Mbps的帶寬。而中國電信則有點凄慘，上載只能跑到500Kbps左右。</p><p>連接海外的鏈路十分不錯，也能幾乎跑滿。可能是因爲云筏科技對服務器進行了升級，整體表現比之前他家的大盤鷄要好上一些。</p><h2 id="IPv6架設Nextcloud實戰"><a href="#IPv6架設Nextcloud實戰" class="headerlink" title="IPv6架設Nextcloud實戰"></a>IPv6架設Nextcloud實戰</h2><p>純IPv6也可以架設網站，并且讓純IPv4用戶可以正常訪問。原理是使用CDN中轉網站的流量，讓CDN服務商幫我們把IPv4請求轉發成IPv6請求。這裏使用最常用的Cloudflare輔助純IPv6的網站架設。</p><p>這裏使用輕量化的Caddy作爲主要的網頁伺服器。雲筏科技即便改版後加配到大數據盤也不算很貴，拿來當作Nextcloud網盤為封鎖地區中轉Google Drive也挺不錯的。</p><h3 id="配置Cloudflare"><a href="#配置Cloudflare" class="headerlink" title="配置Cloudflare"></a>配置Cloudflare</h3><p>前文提到，Cloudflare可以將IPv4流量透過他們的CDN伺服器，轉發到我們的IPv6 VPS上。</p><p>如果你在Cloudflare上沒有域名，可以將自己的域名綁定到Cloudflare。如果你沒有域名，可以去<a href="https://www.freenom.com" target="_blank" rel="noopener">Freenom</a>免費注冊一個域名。</p><p>打開Cloudflare，進入自己的域名。打開域名的DNS頁面</p><p><img src="/images/1599569124350.png" alt></p><p>按下新增記錄，將左邊的類型改成AAAA，名稱取一個自己習慣的名稱，然後將伺服器的IPv6位址填在右邊IPv6位址裏面，最後確保Proxy狀態下面的那朵云是橙色的（這代表你的流量會經過Cloudflare代理），便可以按下儲存等待DNS生效。</p><p><img src="/images/1599569367942.png" alt></p><h3 id="方法一：使用Caddy-PHP安裝Nextcloud"><a href="#方法一：使用Caddy-PHP安裝Nextcloud" class="headerlink" title="方法一：使用Caddy+PHP安裝Nextcloud"></a>方法一：使用Caddy+PHP安裝Nextcloud</h3><p>上網找了個自動化脚本自動安裝Caddy和PHP。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://git.io/vra5C -O - -o /dev/null|bash</span><br></pre></td></tr></table></figure><p>這個脚本是Caddy管理工具，跑完之後應該會提示輸入<code>caddy</code>使用脚本。官方自帶的使用説明如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">caddy start          - Start Caddy Web Server.</span><br><span class="line">caddy stop           - Stop/Shutdown Caddy Web Server.</span><br><span class="line">caddy reload         - Reload Caddy Web Server.</span><br><span class="line">caddy restart        - Restart Caddy Web Server.</span><br><span class="line">caddy status         - Check Caddy Web Server is running or not</span><br><span class="line">                       or just run &apos;caddy&apos;.</span><br><span class="line">caddy install        - Install Caddy Web Server on fresh OS.</span><br><span class="line">caddy install-naked  - Install only Caddy Web Server and no prompt.</span><br><span class="line">caddy edit           - Edit Caddyfile using nano or default editor.</span><br><span class="line">caddy service        - Make Caddy Web Server start on boot (upstart/systemd).</span><br><span class="line">                       Not required because we install service on install.</span><br><span class="line">caddy update         - Update Caddy Web Server.</span><br><span class="line">caddy delete         - Uninstall Caddy Web Server and data.</span><br><span class="line">                       We would prompt you if you want to keep data.</span><br><span class="line">caddy version        - Print version information.</span><br><span class="line">caddy about          - About Caddy Web Server Installer.</span><br></pre></td></tr></table></figure><p>輸入<code>caddy install</code>安裝Caddy與PHP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@ ~]# caddy install</span><br><span class="line"></span><br><span class="line">  Downloading Caddy Web Server v1.0.4 for 64bit...</span><br><span class="line"></span><br><span class="line">  Extracting Caddy Web Server to /opt/caddyserver... [DONE]</span><br><span class="line"></span><br><span class="line">  Are you gonna run php site? [y/N]: y</span><br></pre></td></tr></table></figure><p>詢問你是否架設PHP網站，脚本自動輸入了y。如果選擇y的話會安裝PHP依賴文件，因爲要架設基於PHP編寫的Nextcloud，這裏只需要直接按回車即可，不需要輸入y。輸入之後便會繼續安裝，安裝完成之後會提示你輸入網站信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Installing required php files...</span><br><span class="line"> [DONE]</span><br><span class="line">Installed &apos;php-fpm php-cli php-curl curl sudo&apos;</span><br><span class="line">Fixing php sock issue...  [DONE]</span><br><span class="line">Creating user &apos;caddy&apos;...  [DONE]</span><br><span class="line">Binding port using setcap...  [DONE]</span><br><span class="line">Creating startup service...  DONE</span><br><span class="line"></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/caddy.service to /etc/systemd/system/caddy.service.</span><br><span class="line"></span><br><span class="line">Enter your domain name</span><br><span class="line">Seperated by comma</span><br><span class="line">Domain name:</span><br><span class="line">Enter your email for automated ssl</span><br><span class="line">Email:</span><br></pre></td></tr></table></figure><p>提示輸入申請SSL證書的Email，輸入off，表示不需要SSL，待會用自簽證書替代letsencrypt的證書。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/etc/Caddyfile created</span><br><span class="line">index file created</span><br><span class="line">/var/caddywww/index.html</span><br><span class="line"></span><br><span class="line">PHP-info file created</span><br><span class="line">/var/caddywww/info.php</span><br><span class="line"></span><br><span class="line">Done. Caddy has been installed :)</span><br><span class="line">Run caddy start to start Caddy Web Server</span><br><span class="line"></span><br><span class="line">[root@nzZKNJ1000562 ~]#</span><br></pre></td></tr></table></figure><p>先打開<code>/etc/Caddyfile</code>編輯網站詳情</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ ~]# vi /etc/Caddyfile</span><br></pre></td></tr></table></figure><p>修改成類似以下格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">example.com,:80 &#123;</span><br><span class="line">        root /var/caddywww</span><br><span class="line">        gzip</span><br><span class="line">        tls self_signed</span><br><span class="line">        log /var/log/caddy/access.log</span><br><span class="line">        errors /var/log/caddy/error.log</span><br><span class="line">        fastcgi / 127.0.0.1:9000 php</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，tls行後面的<code>self_signed</code>表示讓Caddy自簽證書，用於加密伺服器到Cloudflare的流量。<code>example.com</code>是你的域名。填寫完之後按下<code>esc</code>，輸入<code>:wq</code>保存退出。</p><h4 id="安裝Nextcloud"><a href="#安裝Nextcloud" class="headerlink" title="安裝Nextcloud"></a>安裝Nextcloud</h4><p>在伺服器目錄裏面下載Nextcloud的在綫安裝脚本，並啓動Caddy。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/caddywww &amp;&amp; wget https://download.nextcloud.com/server/installer/setup-nextcloud.php &amp;&amp; caddy start</span><br><span class="line"><span class="comment"># 如果你是Centos7，需要輸入以下命令開啓端口</span></span><br><span class="line">firewall-cmd --add-port=443/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>然後，在瀏覽器打開<code>https://你的域名/setup-nextcloud.php</code>。安裝Nextcloud。</p><p><img src="/images/1599571539419.png" alt></p><p>下一步，選擇Nextcloud的子目錄，輸入<code>.</code>以安裝在網站的根目錄</p><p><img src="/images/1599571599821.png" alt></p><p>等待安裝完成即可。</p><h3 id="方法二：使用snap安裝Nextcloud（推薦）"><a href="#方法二：使用snap安裝Nextcloud（推薦）" class="headerlink" title="方法二：使用snap安裝Nextcloud（推薦）"></a>方法二：使用snap安裝Nextcloud（推薦）</h3><p>輸入以下命令安裝snap和Nextcloud</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install snapd -y &amp;&amp; systemctl <span class="built_in">enable</span> --now snapd.socket &amp;&amp; sleep 10 &amp;&amp; snap install nextcloud</span><br></pre></td></tr></table></figure><p>然後，在瀏覽器打開<code>https://你的域名/setup-nextcloud.php</code>。注冊管理員賬號即可。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>雲筏科技這款VPS速度尚可，要這麽迷你款的vps跑Nextcloud這種級別的軟件的確有點吃不消。後續可能會安裝V2ray測試一下實際的代理連接速度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;雲筏科技-歐洲9元NAT-VPS-Cloudflare純IPV6建站&quot;&gt;&lt;a href=&quot;#雲筏科技-歐洲9元NAT-VPS-Cloudflare純IPV6建站&quot; class=&quot;headerlink&quot; title=&quot;雲筏科技 歐洲9元NAT-VPS Cloudfl
      
    
    </summary>
    
      <category term="生活心得" scheme="https://www.kappu.ml/categories/%E7%94%9F%E6%B4%BB%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="心得" scheme="https://www.kappu.ml/tags/%E5%BF%83%E5%BE%97/"/>
    
      <category term="技術相關" scheme="https://www.kappu.ml/tags/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
      <category term="VPS" scheme="https://www.kappu.ml/tags/VPS/"/>
    
      <category term="建站" scheme="https://www.kappu.ml/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>反向代理Github，加速國內vps從Github扒文件的速度</title>
    <link href="https://www.kappu.ml/2020/02/09/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86github/"/>
    <id>https://www.kappu.ml/2020/02/09/反向代理github/</id>
    <published>2020-02-09T06:55:30.000Z</published>
    <updated>2020-02-09T07:27:43.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在折騰國内vps，實現反向翻墻，方便看國内的正版資源，加速國内網盤的訪問以及免報備B站直播。但是架設各種服務的時候脫離不了Github這個世界上最大的同性交友網站。</p><p>於是想到了先前很久都在用的寶塔vps，創建了一個靜態站做反向代理。</p><h1 id="需要使用的工具"><a href="#需要使用的工具" class="headerlink" title="需要使用的工具"></a>需要使用的工具</h1><ul><li>國内能正常訪問的海外Vps</li><li>寶塔面板</li></ul><h1 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h1><p>若沒有安裝寶塔面板，先用以下命令安裝寶塔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSO http://download.bt.cn/install/new_install.sh &amp;&amp; bash new_install.sh</span><br></pre></td></tr></table></figure><blockquote><p>建議使用screen命令後臺安裝，安裝寶塔面板有編譯過程，耗時較久。</p></blockquote><p>過程可以把自己擁有的域名解析到你的vps，若沒有域名建議使用<a href="https://www.freenom.com" target="_blank" rel="noopener">Freenom</a>注冊免費域名。這裏不再演示如何注冊與解析域名。</p><p>安裝完成後，根據推薦安裝套件<strong>安裝LNMP套裝</strong>。安裝完畢后打開網站選項卡，添加站點。</p><p><img src="/images/1581231888685.png" alt></p><p>然後輸入自己的域名（把your.domain填寫為其他已經解析的域名），填寫備注和更改php版本為純靜態。</p><p><img src="/images/1581232119934.png" alt></p><p>創建完成後，點擊網站名，會進入設置頁面，設置頁面先選擇SSL選項卡，然後選擇Let’s Encrypt，創建免費的SSL證書（當然你可以選擇不使用https，只使用http）</p><p><img src="/images/1581232312244.png" alt></p><p>然後勾上域名的勾勾，點擊申請（注意申請的時候必須已經解析好域名），申請完畢之後就會出現部署成功的，顯示密鑰與證書的畫面。</p><p><img src="/images/1581232436903.png" alt></p><p>點擊左邊選項卡的反向代理，添加反向代理，然後如下填寫</p><p><img src="/images/1581232503464.png" alt></p><p>提交之後，你的反向代理應該已經生效了，可以試著訪問自己的網站看看是否可以正常使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在折騰國内vps，實現反向翻墻，方便看國内的正版資源，加速國内網盤的訪問以及免報備B站直播。但是架設各種服務的時候脫離不了Github這
      
    
    </summary>
    
      <category term="技術相關" scheme="https://www.kappu.ml/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="Github" scheme="https://www.kappu.ml/tags/Github/"/>
    
      <category term="反向代理" scheme="https://www.kappu.ml/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="nginx" scheme="https://www.kappu.ml/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>記錄B站ban了海外直播后的艱辛反向翻墻歷程</title>
    <link href="https://www.kappu.ml/2020/01/13/%E8%A8%98%E9%8C%84B%E7%AB%99ban%E4%BA%86%E6%B5%B7%E5%A4%96%E7%9B%B4%E6%92%AD%E4%B9%8B%E5%BE%8C%E7%9A%84%E8%89%B1%E8%BE%9B%E5%8F%8D%E5%90%91%E7%BF%BB%E5%A2%BB%E6%AD%B7%E7%A8%8B/"/>
    <id>https://www.kappu.ml/2020/01/13/記錄B站ban了海外直播之後的艱辛反向翻墻歷程/</id>
    <published>2020-01-12T16:00:00.000Z</published>
    <updated>2020-01-12T19:12:52.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="發生了什麽"><a href="#發生了什麽" class="headerlink" title="發生了什麽"></a>發生了什麽</h1><p>事情緣起于2018年我有一天突發奇想想在Bilibili直播玩游戲，或者稍微編編曲。於是我開開心心的打開了我常用的B站賬號，打開直播中心，按下開始直播按鍵，<strong>它提示我系統升級維護中</strong>。我就乖乖的等了幾天，再次打開，仍然是升級維護中。</p><p>於是我找了客服，詢問是什麽升級維護。客服回答得含含糊糊，口齒不清，就是一股不想回答的氣息，<strong>氣得我反向抽烟燙到自己嘴巴</strong>。我放下這個事情，把心思擺回到工作學習上。慢慢忘了這檔子事情。</p><p>三個月後，開始看vtuber。那時候已經是9102年，vtuber也時不時會在b站做做b限。在dd的途中，我突然又想起來關於我直播間的那檔事情。再去開了一下，<strong>依然是系統升級維護中</strong>。這時候我感到事情并不簡單。</p><p>質問了一輪客服，問了問不同的大佬，大概瞭解到是部分海外人士在b站直播的時候提及敏感話題（就是台灣香港南北韓兩伊印度新疆西藏balabala），導致只有b站做了這種一刀切的劣質處理。本來作爲一個剛剛起步的小公司，一刀切一段時間整頓這個玩意也是無可厚非，畢竟是在中國大陸做生意，有些規則確實需要遵循。我心想沒準過多幾個月就能研討出整套的解決方案了吧。</p><p>於是到了2019年年尾，我想給群友演示編曲和游戲的時候，感覺qq的直播極爲弱智，突然又回想到了b站的事情。再上去一看，<strong>仍然是系統升級維護中</strong>。</p><p>成，那我自己看看你到底在維護什麽。</p><h1 id="身份認同與身份證明"><a href="#身份認同與身份證明" class="headerlink" title="身份認同與身份證明"></a>身份認同與身份證明</h1><p>香港居民不配當中國人，全中國的互聯網公司都是這麽定義的。現在，港臺居民注冊b站想要“開通直播功能”，据b站官方所稱需要拍護照或者回鄉證進行實名認證。實際上，我早在2016年已經完成實名認證，2017年也確實可以正常直播，但到了2018年，這個條款説明也沒有變更，不過我就是無法正常開啓直播功能了。</p><p>据不同的消息來源所稱，現在免報備直播主要受到以下兩點限制：</p><ol><li>僅允許大陸IP進行免報備直播</li><li>僅允許大陸居民身份證實名認證用戶進行免報備直播</li></ol><blockquote><p>報備：向b站官方進行活動審核，以進行直播</p></blockquote><p>據我所知，無大陸居民身份證實名認證的賬戶無論是否大陸IP與是否報備，一般都不會允許進行直播。也就是説，在B站現今實際情況下，港澳臺與海外用戶是無法通過正常的手段進行個人直播的。而且，包括港澳臺和海外用戶，<strong>所有的實名認證操作均不可逆不可更改</strong>。</p><p><em>在B站，你想自由的直播，需要僞裝成一個住在大陸的大陸人。</em></p><h1 id="手段"><a href="#手段" class="headerlink" title="手段"></a>手段</h1><p>進入正篇。</p><p><strong>第一個問題：</strong> 僅允許大陸IP進行免報備直播。解決方法其實挺簡單明瞭。只需要在大陸購置一臺vps架設代理服務器便解決了問題。</p><p>不過，畢竟只有直播軟件和瀏覽器會受到b站的ip審查，如果通過普通的代理方法，要麽只能代理瀏覽器，要麽就是全局代理。這個情況和大陸居民翻出來YouTube進行直播的情況是極爲類似的。我在這裏使用了以下兩個工具：</p><ol><li>SSR-win：將SSR協議轉換爲HTTP協議。</li><li>Proxifier：為不同的軟件配置不同的網路方案，這軟件支持HTTP代理協議。</li></ol><p>Proxifier的教程不少，如果有一點點代理相關知識的人應該知道代理實際上就是讓你的代理服務器成爲你的軟件請求的代理人。我們只需要把OBS以及一個專門用來訪問B站的瀏覽器（例如Firefox）代理到大陸，別的軟件不需要回國。具體的教程網上很多，這裏不過多贅述，僅僅提一點。</p><p><strong>規則設置中，OBS安裝目錄下的所有exe麻煩全部勾上去，完成後，方案下被代理的軟件列表應如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obs64.exe; obs-ffmpeg-mux.exe; obs-browser-page.exe; vlc.exe; node.exe</span><br></pre></td></tr></table></figure><p>再提一個比較重要的事情。大陸的Vps服務器近兩年價格愈加嚇人，一般的1M VPS月租都要六七十塊錢，3M帶寬的甚至需要上三四百塊錢的月租，所以現在可能有許多人會選擇<strong>NAT VPS</strong>。</p><p><strong>但要注意，NAT VPS在不同的綫路下的表現差距特別大</strong>。一般來説，接近上海和深圳這兩個出口點的服務器都會比較優質，電信的出口綫路質量一般都比另外兩大運營商要優秀。如果你和我一樣在香港，便宜的NAT VPS服務器裏可能只有東莞的VPS可以選擇。深圳地價高沒什麽小廠商會去開機房，大部分機房都在江蘇安徽浙江一帶，那一帶的對外綫路質量又參差不齊。具體可以上網查找別人關於翻墻中轉NAT VPS的選擇心得。</p><p>第二點，或許有兩個方法。</p><p>第一個方法，也是我本人用的方法，就是<strong>請求信任的人幫忙認證，注冊新的賬號，成爲你在B站上的靈魂</strong>。這個方法簡單且快捷，但是實行起來卻會有不少疑慮和擔心。而且，如果是特純種香港人台灣人，和大陸聯係不多，這個方法更是比較難適用。</p><p>第二個方法，就是返回大陸申請居住證，用居住證進行實名認證。這個方法我沒有實證過，關於如何申請居住證以及有什麽條件，我也沒有實際操作過。這裏僅僅是提出一種可能性。（但僅僅爲了閑暇時間直播而申請居住證，未免太大費周章）</p><h1 id="怠惰"><a href="#怠惰" class="headerlink" title="怠惰"></a>怠惰</h1><p>總而言之，B站作爲一個互聯網公司，坐擁全國最多的綜合視頻流量，身爲全國綜合視頻和直播的壟斷龍頭，理應有相應的執行力和技術能力解決政治言論上的杯葛。即便是報備，也可以將報備流程做的系統化和程序化，在網頁上實現類似視頻和封面審核的報備流程。但是這并沒有發生，實際原因爲何，也不得而知，只能任我們猜想。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;發生了什麽&quot;&gt;&lt;a href=&quot;#發生了什麽&quot; class=&quot;headerlink&quot; title=&quot;發生了什麽&quot;&gt;&lt;/a&gt;發生了什麽&lt;/h1&gt;&lt;p&gt;事情緣起于2018年我有一天突發奇想想在Bilibili直播玩游戲，或者稍微編編曲。於是我開開心心的打開了我常用的B
      
    
    </summary>
    
      <category term="生活心得" scheme="https://www.kappu.ml/categories/%E7%94%9F%E6%B4%BB%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="心得" scheme="https://www.kappu.ml/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>manjaro的KDE安裝包之默認密碼</title>
    <link href="https://www.kappu.ml/2019/11/10/manjaro_kde_passwd/"/>
    <id>https://www.kappu.ml/2019/11/10/manjaro_kde_passwd/</id>
    <published>2019-11-09T16:00:00.000Z</published>
    <updated>2019-11-09T18:38:29.508Z</updated>
    
    <content type="html"><![CDATA[<p>manjaro安裝過程中會自動鎖屏，而且系統自帶密碼，manjaro賬戶的默認密碼為<code>manjaro</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;manjaro安裝過程中會自動鎖屏，而且系統自帶密碼，manjaro賬戶的默認密碼為&lt;code&gt;manjaro&lt;/code&gt;。&lt;/p&gt;

      
    
    </summary>
    
      <category term="技術相關" scheme="https://www.kappu.ml/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="Linux" scheme="https://www.kappu.ml/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>RSA非對稱加密算法學習筆記</title>
    <link href="https://www.kappu.ml/2019/11/10/study_of_rsa/"/>
    <id>https://www.kappu.ml/2019/11/10/study_of_rsa/</id>
    <published>2019-11-09T16:00:00.000Z</published>
    <updated>2019-11-09T18:38:29.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="這是啥"><a href="#這是啥" class="headerlink" title="這是啥"></a>這是啥</h1><p>RSA算法是一種非對稱加密算法，他的原理完全基於歐拉定理，而歐拉定理基於歐拉函數……歐拉函數基於互質……互質則確定了兩個數字之間的唯一性……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">歐拉函數：φ(n) = n-1</span><br><span class="line">歐拉定理：如果兩個正整數a和n互質，則n的歐拉函數 φ(n) 可以讓下面的等式成立：a^φ(n)%n=1</span><br><span class="line">其中%是取餘數之含義</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;這是啥&quot;&gt;&lt;a href=&quot;#這是啥&quot; class=&quot;headerlink&quot; title=&quot;這是啥&quot;&gt;&lt;/a&gt;這是啥&lt;/h1&gt;&lt;p&gt;RSA算法是一種非對稱加密算法，他的原理完全基於歐拉定理，而歐拉定理基於歐拉函數……歐拉函數基於互質……互質則確定了兩個數字之間的唯
      
    
    </summary>
    
      <category term="技術相關" scheme="https://www.kappu.ml/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="學習筆記" scheme="https://www.kappu.ml/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
      <category term="加密" scheme="https://www.kappu.ml/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="安全" scheme="https://www.kappu.ml/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Windows版本的dd工具</title>
    <link href="https://www.kappu.ml/2019/11/09/Usege_dd_for_windows/"/>
    <id>https://www.kappu.ml/2019/11/09/Usege_dd_for_windows/</id>
    <published>2019-11-09T14:30:00.000Z</published>
    <updated>2019-11-09T16:32:41.423Z</updated>
    
    <content type="html"><![CDATA[<p>Windows版本的dd與Linux / macOS下的差異不大，只不過驅動器名稱相當的詭異。<br>在windows下，dd命令使用以下標識來代表驅動器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\.\a: #a代表盤符</span><br></pre></td></tr></table></figure><p>將<code>1.img</code>刻入e盤即為</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd.exe if=1.img of=\\.\e</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Windows版本的dd與Linux / macOS下的差異不大，只不過驅動器名稱相當的詭異。&lt;br&gt;在windows下，dd命令使用以下標識來代表驅動器&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="技術相關" scheme="https://www.kappu.ml/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="Linux" scheme="https://www.kappu.ml/tags/Linux/"/>
    
      <category term="Windows" scheme="https://www.kappu.ml/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>系統學習框架 —— 如何開始學習完全不懂的一樣學科</title>
    <link href="https://www.kappu.ml/2019/10/27/Studying_system_theory/"/>
    <id>https://www.kappu.ml/2019/10/27/Studying_system_theory/</id>
    <published>2019-10-26T16:08:00.000Z</published>
    <updated>2019-11-09T16:32:41.423Z</updated>
    
    <content type="html"><![CDATA[<p>任何的學習都需要一定的耐心、通過不斷的實踐纍積經驗。不過，“學習”具體是什麽，我們是如何學習的？老師是如何教導我們知識的？</p><a id="more"></a><h1 id="基礎的要素"><a href="#基礎的要素" class="headerlink" title="基礎的要素"></a>基礎的要素</h1><p>任何的學習都需要瞭解以下幾個學科要素</p><ol><li><p><strong>術語</strong>：任何理論都需要一套術語對學科内發生的現象進行描述或總結，方便邏輯思考。</p><p>舉例而言，音樂中的CDEFGAB七個音的名稱是用於描述7個音高的，拍子數是用於描述音之間的時間關係的。</p></li><li><p><strong>思維模式</strong>：任意的理論</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;任何的學習都需要一定的耐心、通過不斷的實踐纍積經驗。不過，“學習”具體是什麽，我們是如何學習的？老師是如何教導我們知識的？&lt;/p&gt;
    
    </summary>
    
      <category term="生活心得" scheme="https://www.kappu.ml/categories/%E7%94%9F%E6%B4%BB%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="學習" scheme="https://www.kappu.ml/tags/%E5%AD%B8%E7%BF%92/"/>
    
  </entry>
  
  <entry>
    <title>Hexo學習筆記 —— 多端同步、Github Pages部署、更改主題、評論功能（四）</title>
    <link href="https://www.kappu.ml/2019/08/22/HEXO_STUDY_4/"/>
    <id>https://www.kappu.ml/2019/08/22/HEXO_STUDY_4/</id>
    <published>2019-08-22T08:42:18.000Z</published>
    <updated>2019-08-22T10:08:25.669Z</updated>
    
    <content type="html"><![CDATA[<p>關於多端同步依然還有一些東西可以略微分享。我們可以使用Github的webhook功能，對儲存源碼和文章md文件的repo進行pull操作后，自動將網頁輸出然後push到博客端。</p><blockquote><p>講實話，這玩意真的挺麻煩，我折騰了特別久，結果還是最最最簡單的辦法：http訪問就推送，最爲方便。</p></blockquote><a id="more"></a><h1 id="在VPS上安裝hexo的運行環境"><a href="#在VPS上安裝hexo的運行環境" class="headerlink" title="在VPS上安裝hexo的運行環境"></a>在VPS上安裝hexo的運行環境</h1><p>這方面已經在<a href="/2019/08/20/20190820">第一篇文章</a>詳細講過，無非就是安裝nodejs, hexo-cli等等。</p><p><strong>這裏不重複闡述</strong></p><h1 id="給VPS設置在Github上的通用SSH授權"><a href="#給VPS設置在Github上的通用SSH授權" class="headerlink" title="給VPS設置在Github上的通用SSH授權"></a>給VPS設置在Github上的通用SSH授權</h1><p>輸入以下代碼創建一個ssh key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>然後複製~/.ssh/id_rsa.pub文件内的所有内容，打開github的setting中的<a href="https://github.com/settings/keys" target="_blank" rel="noopener">SSH and GPG keys</a></p><p>添加SSH Key即可<br><img src="/images/github-setssh.png" alt></p><h1 id="在VPS上克隆自己創建的庫"><a href="#在VPS上克隆自己創建的庫" class="headerlink" title="在VPS上克隆自己創建的庫"></a>在VPS上克隆自己創建的庫</h1><p>在第二篇文章中我們創建了一個同步庫，裏面存放著hexo的源碼，用來進行多端同步。現在將他克隆到vps上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir auto</span><br><span class="line"><span class="built_in">cd</span> auto</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:yourname/blog.git</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>然後安裝pm2管理後臺應用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><p>之後，在本地創建一個<code>deploy.js</code>，用nodejs寫一個監聽http請求的脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> port = <span class="number">3000</span>; <span class="comment">//監聽端口</span></span><br><span class="line"><span class="keyword">var</span> command = <span class="string">'sh ./deploy.sh'</span> <span class="comment">//運行指令</span></span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'content-type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">    deploy = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec(command,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,stdout,stderr</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'deploy.'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(<span class="string">'It works'</span>);</span><br><span class="line">&#125;).listen(port);</span><br></pre></td></tr></table></figure><p>再創建一個<code>deploy.sh</code>進行<code>pull</code>和<code>hexo g -d</code>操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git pull</span><br><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>這時候監聽服務應該可以運作了。先在別的設備更改一下hexo源碼並push到github，然後試著運行以下代碼。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node ./deploy.js</span><br></pre></td></tr></table></figure><p>訪問vps的<code>http://ip:3000</code>。若你的ip為<code>100.100.100.100</code>，則訪問<code>http://100.100.100.100:3000</code>，不出意外網頁會返回<code>It works</code>，vps控制臺會輸出<code>deploy.</code></p><p>按下<code>Ctrl</code>+<code>C</code>關閉node，輸入<code>pm2 start deploy.js</code>將服務運行在後臺，然後開始配置github</p><h1 id="Github端的配置"><a href="#Github端的配置" class="headerlink" title="Github端的配置"></a>Github端的配置</h1><p>進入你的同步代碼倉庫，點擊上方的Setting。<br><img src="/images/github-repo-setting.png" alt></p><p>然後點擊左方的Webhooks，添加新的webhook<br><img src="/images/github-repo-webhooks.png" alt></p><p>進入后，</p><ol><li>在Payload URL中填入你剛剛訪問的網址（<strong>包括端口</strong>）</li><li>直接點擊Add webhook。<br><img src="/images/github-repo-newwebhooks.png" alt></li></ol><p>然後使用另一臺機器，更改一下你的文章，將blog文件夾更新到github，觀察博客頁面有沒有變化。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;關於多端同步依然還有一些東西可以略微分享。我們可以使用Github的webhook功能，對儲存源碼和文章md文件的repo進行pull操作后，自動將網頁輸出然後push到博客端。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;講實話，這玩意真的挺麻煩，我折騰了特別久，結果還是最最最簡單的辦法：http訪問就推送，最爲方便。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技術相關" scheme="https://www.kappu.ml/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="Hexo" scheme="https://www.kappu.ml/tags/Hexo/"/>
    
      <category term="博客" scheme="https://www.kappu.ml/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Github" scheme="https://www.kappu.ml/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>讓Markdown文檔一秒轉換為Keynote演示文檔 —— md2key學習筆記</title>
    <link href="https://www.kappu.ml/2019/08/21/%E8%AE%93Markdown%E6%96%87%E6%AA%94%E4%B8%80%E7%A7%92%E8%BD%89%E6%8F%9B%E7%82%BAKeynote%E6%BC%94%E7%A4%BA%E6%96%87%E6%AA%94%20%E2%80%94%E2%80%94%20md2key%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    <id>https://www.kappu.ml/2019/08/21/讓Markdown文檔一秒轉換為Keynote演示文檔 —— md2key學習筆記/</id>
    <published>2019-08-20T16:00:00.000Z</published>
    <updated>2019-08-22T10:25:33.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Keynote是一個蘋果自家的演示文檔軟件，有許多強大的預設，動畫效果十分驚人<br>md2key是一個讓Markdown格式的文檔轉換為Keynote文檔的工具，由k0kubun開發維護<br><a href="https://github.com/k0kubun/md2key" target="_blank" rel="noopener">GitHub主頁</a></p><a id="more"></a><h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 僅限macOS用戶</span><br><span class="line">gem install md2key</span><br></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li>創建一個Keynote文檔</li><li>添加一張你想要的樣式幻燈片作為封面，然後把第一張幻燈片刪除</li><li>創建第二張幻燈片，這張幻燈片的樣式作為內頁</li><li>保持文檔開啟，在終端直接輸入<code>md2key markdown.md</code></li></ol><h1 id="進階用法"><a href="#進階用法" class="headerlink" title="進階用法"></a>進階用法</h1><ol><li>點擊右方的“編輯母版幻燈片”</li><li>在Keynote中給任何你將會用到的母版幻燈片命名為“cover”“h1”“h2”⋯⋯“h5”</li><li>cover對應第一段“#”，第一個#之後的文字會印刷在封面頁，h1對應一個#，h2對應兩個#⋯⋯</li></ol><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># The presentation</span></span><br><span class="line">@k0kubun</span><br><span class="line"></span><br><span class="line"><span class="section">## Hello world</span></span><br><span class="line">I'm takashi kokubun</span><br><span class="line"><span class="bullet">- </span>This is a pen</span><br><span class="line"><span class="bullet">- </span>Nested item is available</span><br><span class="line"></span><br><span class="line"><span class="section">## How are you?</span></span><br><span class="line"><span class="bullet">- </span>I'm fine thank you</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;Keynote是一個蘋果自家的演示文檔軟件，有許多強大的預設，動畫效果十分驚人&lt;br&gt;md2key是一個讓Markdown格式的文檔轉換為Keynote文檔的工具，由k0kubun開發維護&lt;br&gt;&lt;a href=&quot;https://github.com/k0kubun/md2key&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub主頁&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技術相關" scheme="https://www.kappu.ml/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="Markdown" scheme="https://www.kappu.ml/tags/Markdown/"/>
    
      <category term="Keynote" scheme="https://www.kappu.ml/tags/Keynote/"/>
    
      <category term="PPT" scheme="https://www.kappu.ml/tags/PPT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo學習筆記 —— 多端同步、Github Pages部署、更改主題、評論功能（三）</title>
    <link href="https://www.kappu.ml/2019/08/20/HEXO_STUDY_3/"/>
    <id>https://www.kappu.ml/2019/08/20/HEXO_STUDY_3/</id>
    <published>2019-08-20T12:03:50.000Z</published>
    <updated>2019-08-22T10:29:44.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主題-——-NexT"><a href="#主題-——-NexT" class="headerlink" title="主題 —— NexT"></a>主題 —— <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT</a></h1><p>進入hexo目錄，然後下載主題</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><ul><li>編輯hexo目錄下的<code>_config.yml</code>，把主題改成改成<code>theme: next</code>。</li><li>然後編輯<code>theme/next/_config.yml</code><ul><li>搜索<code>schemes</code>關鍵詞，將<code>scheme: Gemini</code>前的#號去掉，然後注釋掉默認的<code>scheme: Muse</code></li></ul></li></ul><p>運行以下命令更新主題（若你有根據上一篇編寫<code>push</code>腳本）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./push</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="評論"><a href="#評論" class="headerlink" title="評論"></a>評論</h1><p>Hexo是一個<strong>靜態博客生成工具</strong>，生成的頁面僅有<strong>展示功能</strong>，而沒有<strong>提交功能</strong>。</p><blockquote><p>以下內容參考 <a href="https://www.jianshu.com/p/d68de067ea74" target="_blank" rel="noopener">https://www.jianshu.com/p/d68de067ea74</a></p></blockquote><p>如果需要實現評論，Hexo是沒法接收網頁傳來的表單信息的,則需要借助相關的服務。這裏使用的是<a href="https://disqus.com/" target="_blank" rel="noopener"><strong>Disqus</strong></a></p><p>進入官方站點注冊後登錄，點擊GET START，然後按下下圖所示按鈕</p><p><img src="https://upload-images.jianshu.io/upload_images/5863464-7d0a40ee35c0dafa.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;主題-——-NexT&quot;&gt;&lt;a href=&quot;#主題-——-NexT&quot; class=&quot;headerlink&quot; title=&quot;主題 —— NexT&quot;&gt;&lt;/a&gt;主題 —— &lt;a href=&quot;https://github.com/theme-next/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NexT&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;進入hexo目錄，然後下載主題&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/theme-next/hexo-theme-next themes/next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;編輯hexo目錄下的&lt;code&gt;_config.yml&lt;/code&gt;，把主題改成改成&lt;code&gt;theme: next&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;然後編輯&lt;code&gt;theme/next/_config.yml&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;搜索&lt;code&gt;schemes&lt;/code&gt;關鍵詞，將&lt;code&gt;scheme: Gemini&lt;/code&gt;前的#號去掉，然後注釋掉默認的&lt;code&gt;scheme: Muse&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;運行以下命令更新主題（若你有根據上一篇編寫&lt;code&gt;push&lt;/code&gt;腳本）&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./push&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技術相關" scheme="https://www.kappu.ml/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="Hexo" scheme="https://www.kappu.ml/tags/Hexo/"/>
    
      <category term="博客" scheme="https://www.kappu.ml/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Github" scheme="https://www.kappu.ml/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo學習筆記 —— 多端同步、Github Pages部署、更改主題、評論功能（二）</title>
    <link href="https://www.kappu.ml/2019/08/20/HEXO_STUDY_2/"/>
    <id>https://www.kappu.ml/2019/08/20/HEXO_STUDY_2/</id>
    <published>2019-08-20T11:03:50.000Z</published>
    <updated>2019-08-22T10:29:44.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同步多端……真正麻煩的事情來了"><a href="#同步多端……真正麻煩的事情來了" class="headerlink" title="同步多端……真正麻煩的事情來了"></a>同步多端……真正麻煩的事情來了</h1><p>根據剛剛提到的<strong>文件目錄結構</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-- _config.yml <span class="comment">#配置文件</span></span><br><span class="line">|-- package.json <span class="comment">#hexo的依賴，插件信息也保存在這文件內</span></span><br><span class="line">|-- scaffolds <span class="comment">#標準模板，一般不需要關心</span></span><br><span class="line">|-- <span class="built_in">source</span> <span class="comment">#資源目錄，文章與各種附件也都保存在這</span></span><br><span class="line">   |-- _posts <span class="comment">#文章文件夾</span></span><br><span class="line">|-- themes <span class="comment">#主題</span></span><br><span class="line">|-- .gitignore <span class="comment">#git同步的時候忽略的目錄與文件</span></span><br><span class="line">|-- public <span class="comment">#生成後的靜態博客文件夾</span></span><br></pre></td></tr></table></figure><p>有同步意義的是_config.yml, package.json, source/, themes</p><p>最重要的是<code>source</code>文件夾，裏面包含了可以引用的圖片、文章文件以及各種附加的小附件。</p><a id="more"></a><h2 id="Google-Drive-百度網盤-Dropbox等同步網盤"><a href="#Google-Drive-百度網盤-Dropbox等同步網盤" class="headerlink" title="Google Drive, 百度網盤, Dropbox等同步網盤"></a>Google Drive, 百度網盤, Dropbox等同步網盤</h2><p>使用<a href="https://drive.google.com" target="_blank" rel="noopener">Google Drive</a>一類簡單粗暴的多端同步網盤來同步我們的hexo文檔和配置，缺點就是node相關的文件也都會一並同步，好處就是特別省事。</p><p>直接將整個目錄復制到Google Drive即可，之後所有操作都在掛載後的Google Drive裏面進行。</p><p>在另外一臺機器，安裝Google Drive同步程序，然後將hexo目錄設置爲同步以及離線可用，之後整個Hexo端便會一直保持着最新的文件。</p><p><strong>其他網盤同理</strong></p><h2 id="Github同步"><a href="#Github同步" class="headerlink" title="Github同步"></a>Github同步</h2><p>這個方案配置比較麻煩，但是後期使用問題較少，挺多大佬也是使用這個方案進行多端同步</p><p>以下是步驟</p><ol><li><p>先在Github建立一個私人庫，專門存放Hexo部署程序</p></li><li><p>在Hexo的目錄下，運行<code>git init</code></p></li><li><p>修改<code>.gitignore</code>爲以下內容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure></li><li><p>執行以下代碼，進行第一次推送代碼</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote add origin git@github.com:username/library.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>創建一個名爲push的文件，將以下代碼輸入進去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m `date +%Y-%m-%d-%H%M`</span><br><span class="line">git push origin master</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li><li><p>輸入<code>chmod +x push</code>，給腳本增加運行權限</p></li><li><p>輸入<code>./push</code>嘗試推送</p></li></ol><p>之後，新的機器先安裝Hexo，再輸入<code>git clone git@github.com:username/library.git</code>，再進入克隆目錄內，輸入<code>npm install</code>安裝依賴即可。</p><p>每次編輯完文章，輸入<code>./push</code>推送，換到另一臺電腦想繼續編輯時，輸入<code>git pull</code>拉取最新檔案下來即可。</p><blockquote><p>2019-08-22更新</p><p>如果你有自己的VPS服務器，可以使用github的webhook功能進行自動更新，具體可以查看<a href="https://cupkappu.github.io/2019/08/22/HEXO_STUDY_4/" target="_blank" rel="noopener">這篇文章</a></p><p>需要將push文件修改成以下内容才能使用webhook自動更新網頁端</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git add .</span><br><span class="line">git commit -m `date +%Y-%m-%d-%H%M`</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;同步多端……真正麻煩的事情來了&quot;&gt;&lt;a href=&quot;#同步多端……真正麻煩的事情來了&quot; class=&quot;headerlink&quot; title=&quot;同步多端……真正麻煩的事情來了&quot;&gt;&lt;/a&gt;同步多端……真正麻煩的事情來了&lt;/h1&gt;&lt;p&gt;根據剛剛提到的&lt;strong&gt;文件目錄結構&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;|-- _config.yml &lt;span class=&quot;comment&quot;&gt;#配置文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- package.json &lt;span class=&quot;comment&quot;&gt;#hexo的依賴，插件信息也保存在這文件內&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- scaffolds &lt;span class=&quot;comment&quot;&gt;#標準模板，一般不需要關心&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#資源目錄，文章與各種附件也都保存在這&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |-- _posts &lt;span class=&quot;comment&quot;&gt;#文章文件夾&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- themes &lt;span class=&quot;comment&quot;&gt;#主題&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- .gitignore &lt;span class=&quot;comment&quot;&gt;#git同步的時候忽略的目錄與文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- public &lt;span class=&quot;comment&quot;&gt;#生成後的靜態博客文件夾&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有同步意義的是_config.yml, package.json, source/, themes&lt;/p&gt;
&lt;p&gt;最重要的是&lt;code&gt;source&lt;/code&gt;文件夾，裏面包含了可以引用的圖片、文章文件以及各種附加的小附件。&lt;/p&gt;
    
    </summary>
    
      <category term="技術相關" scheme="https://www.kappu.ml/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="Hexo" scheme="https://www.kappu.ml/tags/Hexo/"/>
    
      <category term="博客" scheme="https://www.kappu.ml/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Github" scheme="https://www.kappu.ml/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo學習筆記 —— 多端同步、Github Pages部署、更改主題、評論功能（一）</title>
    <link href="https://www.kappu.ml/2019/08/20/HEXO_STUDY_1/"/>
    <id>https://www.kappu.ml/2019/08/20/HEXO_STUDY_1/</id>
    <published>2019-08-20T09:23:30.000Z</published>
    <updated>2019-08-22T10:29:44.884Z</updated>
    
    <content type="html"><![CDATA[<p>舊的博客是用Typecho做的，什麼都挺好，就是這個博客沒法直接上載.md文件，備份也顯得挺麻煩。</p><p>在15年的時候嘗試搭建Hexo博客，那時候的Hexo的配置流程比現在復雜特別多。現在比之前方便多了，想着要不要遷移到Hexo。</p><a id="more"></a><h2 id="基本了解"><a href="#基本了解" class="headerlink" title="基本了解"></a>基本了解</h2><p><strong>Hexo主要由三個部分組成</strong></p><ul><li>生成端<ul><li>生成更新後的博客靜態頁面</li></ul></li><li>推送端<ul><li>負責把靜態頁面推送到網頁</li></ul></li><li>網頁端<ul><li>提供網頁瀏覽服務</li></ul></li></ul><p>一般生成端和推送端整合在一起，網頁端獨立部署在虛擬主機或者Github Pages、Coding Pages上。<br>但是文章內容都是保存在生成端的source/_posts，要是換一臺機子就沒法同步文章，也沒法推送文章。</p><h2 id="安裝hexo"><a href="#安裝hexo" class="headerlink" title="安裝hexo"></a>安裝hexo</h2><p>首先需要安裝nodejs與npm，在官網上也有<a href="https://nodejs.org/zh-cn/download/package-manager/" target="_blank" rel="noopener">不同系統使用包管理器安裝的指引</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Using Ubuntu</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using Debian, as root</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | bash -</span><br><span class="line">apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using RHEL, CentOS, CloudLinux and Fedora, as root</span></span><br><span class="line"></span><br><span class="line">curl -sL https://rpm.nodesource.com/setup_12.x | bash -</span><br></pre></td></tr></table></figure><p>安裝完nodejs之後使用<code>node -v</code>與<code>npm -v</code>查看nodejs與npm的版本。可以使用<code>npm install npm</code>進行升級，然後使用npm安裝hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog &amp;&amp; <span class="built_in">cd</span> blog</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">hexo init <span class="comment">#初始化hexo</span></span><br><span class="line"><span class="comment">#輸入以下命令檢查網站雛形</span></span><br><span class="line">hexo new <span class="built_in">test</span></span><br><span class="line">hexo g <span class="comment">#構建靜態頁面</span></span><br><span class="line">hexo s <span class="comment">#開啓服務器</span></span><br></pre></td></tr></table></figure><p>完成之後在瀏覽器輸入網址<a href="localhost:4000" target="_blank" rel="noopener">localhost:4000</a>。應該會看到生成的test頁面和hello world頁面。</p><p>hexo的<strong>目錄結構</strong>如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-- _config.yml <span class="comment">#配置文件</span></span><br><span class="line">|-- package.json <span class="comment">#hexo的依賴，插件信息也保存在這文件內</span></span><br><span class="line">|-- scaffolds <span class="comment">#標準模板，一般不需要關心</span></span><br><span class="line">|-- <span class="built_in">source</span> <span class="comment">#資源目錄，文章與各種附件也都保存在這</span></span><br><span class="line">   |-- _posts <span class="comment">#文章文件夾</span></span><br><span class="line">|-- themes <span class="comment">#主題</span></span><br><span class="line">|-- .gitignore <span class="comment">#git同步的時候忽略的目錄與文件</span></span><br><span class="line">|-- public <span class="comment">#生成後的靜態博客文件夾</span></span><br></pre></td></tr></table></figure><p>常用的命令有以下幾條</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br><span class="line"></span><br><span class="line">#命令简写</span><br><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g == hexo generate #生成</span><br><span class="line">hexo s == hexo server #啓動伺服器</span><br><span class="line">hexo d == hexo deploy #推送部署</span><br><span class="line"></span><br><span class="line">hexo server #Hexo監視文件變動並自動更新，無需重啓服務器</span><br><span class="line">hexo server -s #靜態模式，只監視public文件夾下的內容</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定義 IP</span><br><span class="line">hexo clean #清除緩存</span><br></pre></td></tr></table></figure><p>而_posts內.md文件的文章大致結構如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: [標題]</span><br><span class="line">date: [YYYY-MM-DD HH：MM：SS]</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>[tag1]</span><br><span class="line"><span class="bullet">- </span>[tag2]</span><br><span class="line"><span class="bullet">- </span>[tag3]</span><br><span class="line">categories: [分類]</span><br><span class="line">---</span><br><span class="line">[文章內容]</span><br></pre></td></tr></table></figure><h2 id="推送網站"><a href="#推送網站" class="headerlink" title="推送網站"></a>推送網站</h2><p>剛剛介紹文件目錄結構提到有一個_config.yml配置文件，使用atom或你喜歡的編輯器打開這個文件，在最後幾行會看到以下字樣</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="comment">#推送類型</span></span><br><span class="line"><span class="attr">  repo:</span></span><br></pre></td></tr></table></figure><p>這個就是hexo自帶的網站推送功能的配置行，這次我使用Github中自帶的Github Pages當作網頁端，而這需要安裝hexo的git推送插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然後修改_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">yourname.github.com</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>可以看<a href>這裏</a>查看如何配置Github以實現二級域名訪問</p><p>其他的部署渠道可以在<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">這裏</a>查看如何部署</p><p>修改完_config.yml後，分別輸入以下三條命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然後你的第一次部署便完成了。訪問 yourname.github.com，應該可以看到你部署的hexo博客了。</p><p>接下來要處理的是<strong>如何同步多端</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;舊的博客是用Typecho做的，什麼都挺好，就是這個博客沒法直接上載.md文件，備份也顯得挺麻煩。&lt;/p&gt;
&lt;p&gt;在15年的時候嘗試搭建Hexo博客，那時候的Hexo的配置流程比現在復雜特別多。現在比之前方便多了，想着要不要遷移到Hexo。&lt;/p&gt;
    
    </summary>
    
      <category term="技術相關" scheme="https://www.kappu.ml/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="Hexo" scheme="https://www.kappu.ml/tags/Hexo/"/>
    
      <category term="博客" scheme="https://www.kappu.ml/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Github" scheme="https://www.kappu.ml/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>在Proxmox中安裝macOS Mojave並設置直通顯卡</title>
    <link href="https://www.kappu.ml/2019/08/20/%E5%9C%A8Proxmox%E4%B8%AD%E5%AE%89%E8%A3%9DmacOS%20Mojave%E4%B8%A6%E8%A8%AD%E7%BD%AE%E7%9B%B4%E9%80%9A%E9%A1%AF%E5%8D%A1/"/>
    <id>https://www.kappu.ml/2019/08/20/在Proxmox中安裝macOS Mojave並設置直通顯卡/</id>
    <published>2019-08-19T16:00:00.000Z</published>
    <updated>2019-08-22T10:25:33.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在PVE中安裝macOS-Mojave並設置直通顯卡"><a href="#在PVE中安裝macOS-Mojave並設置直通顯卡" class="headerlink" title="在PVE中安裝macOS Mojave並設置直通顯卡"></a>在PVE中安裝macOS Mojave並設置直通顯卡</h1><h2 id="先決條件："><a href="#先決條件：" class="headerlink" title="先決條件："></a>先決條件：</h2><ul><li>8G或以上內存</li><li>支持虛擬化以及SSE4.2的cpu</li></ul><blockquote><p><em>包括AMD與INTEL</em></p></blockquote><a id="more"></a><h2 id="1-安裝PVE"><a href="#1-安裝PVE" class="headerlink" title="1 安裝PVE"></a>1 安裝PVE</h2><p><a href="http://www.kappu.ml/index.php/archives/3/">安裝教程</a><br>此處安裝方法與一般的方法相同，推薦將pve系統安裝到usb設備</p><h2 id="2-創建macos安裝鏡像"><a href="#2-創建macos安裝鏡像" class="headerlink" title="2 創建macos安裝鏡像"></a>2 創建macos安裝鏡像</h2><p>在linux或macos系統下運行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget  https://raw.githubusercontent.com/thenickdude/OSX-KVM/master/fetch-macOS.py</span><br><span class="line">chmod +x fetch-macOS.py</span><br><span class="line">./fetch-macOS.py</span><br></pre></td></tr></table></figure><p>在選單中選擇最新的iso，等待下載完成後，運行以下命令，將dmg包轉換成iso包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安裝dmg2img 若你是deb包管理系以外的系統，可以自行查找如何安裝dmg2img</span><br><span class="line">apt-get install dmg2img -y</span><br><span class="line"># 利用dmg2img將基本系統dmg鏡像轉為iso鏡像</span><br><span class="line">dmg2img BaseSystem.dmg Mojave-installer.iso</span><br><span class="line"></span><br><span class="line"># 若你是macOS，請使用以下命令</span><br><span class="line">hdiutil convert BaseSystem.dmg -format RdWr -o Mojave-installer.iso</span><br><span class="line">mv Mojave-installer.iso.img Mojave-installer.iso</span><br></pre></td></tr></table></figure><p>然後下載Clover</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Ubuntu &amp; Debian</span><br><span class="line">apt-get install unzip -y</span><br><span class="line"># Centos &amp; RHEL</span><br><span class="line">yum install unzip -y</span><br><span class="line"># 取得clover</span><br><span class="line">wget https://github.com/thenickdude/OSX-KVM/releases/download/clover-r4920/clover-r4920.iso.zip &amp;&amp; unzip clover-r4920.iso.zip</span><br></pre></td></tr></table></figure><p>然後將clover-r4920.iso與Mojave-installer.iso上傳到PVE中</p><h2 id="3-在網頁中創建虛擬機"><a href="#3-在網頁中創建虛擬機" class="headerlink" title="3 在網頁中創建虛擬機"></a>3 在網頁中創建虛擬機</h2><ol><li>OS頁面選擇Clover ISO進行引導</li><li>系統選擇其他（other）</li><li>System頁面的顯示卡選擇VMware兼容</li><li>BIOS選擇OVMF</li><li>Machine選擇q35</li><li>硬盤選擇SATA，緩存設置成Write back（不安全）</li><li>CPU的類型設置成Penryn</li><li>網卡設置成Vmware vmxnet3</li></ol><p>點開虛擬機的硬件選項卡，添加Mojave-installer.iso，選擇ide通道的cd-ram</p><p>先不要啟動虛擬機，在ssh中打開/etc/pve/qemu-server/你的VMID.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/pve/qemu-server/你的VMID.conf</span><br></pre></td></tr></table></figure><p>然後輸入以下代碼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">args: -device isa-applesmc,osk=&quot;ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc&quot; -smbios type=2 -cpu Penryn,kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,+pcid,+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check -device usb-kbd,bus=ehci.0,port=2</span><br></pre></td></tr></table></figure><p>將兩個驅動器的配置中的cdrom刪除，加入cache=unsafe<br>最後的文檔應該看起來像這樣</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">args: -device isa-applesmc,osk=&quot;ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc&quot; -smbios type=2 -cpu Penryn,kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,+pcid,+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check -device usb-kbd,bus=ehci.0,port=2</span><br><span class="line">balloon: 0</span><br><span class="line">bios: ovmf</span><br><span class="line">boot: cdn</span><br><span class="line">bootdisk: ide2</span><br><span class="line">cores: 4</span><br><span class="line">cpu: Penryn</span><br><span class="line">efidisk0: vms:vm-144-disk-1,size=128K</span><br><span class="line">ide0: isos:iso/Mojave.iso,cache=unsafe</span><br><span class="line">ide2: isos:iso/clover-r4920.iso,cache=unsafe</span><br><span class="line">machine: q35</span><br><span class="line">memory: 8192</span><br><span class="line">name: mojave</span><br><span class="line">net0: vmxnet3=xx:xx:xx:xx:xx:xx,bridge=vmbr0,firewall=1</span><br><span class="line">numa: 0</span><br><span class="line">ostype: other</span><br><span class="line">sata0: vms:vm-144-disk-0,cache=unsafe,size=64G</span><br><span class="line">smbios1: uuid=xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx</span><br><span class="line">sockets: 1</span><br><span class="line">vga: vmware</span><br></pre></td></tr></table></figure><p>設置完畢後，根據<a href="https://www.nicksherlock.com/2018/04/patch-ovmf-to-support-macos-in-proxmox-5-1/" target="_blank" rel="noopener">patch-ovmf-to-support-macos-in-proxmox-5-1 </a>來安裝OVMF庫</p><blockquote><p>For PVE 6</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Add missing locale</span><br><span class="line">echo &quot;en_US.UTF-8 UTF-8&quot; &gt;&gt; /etc/locale.gen</span><br><span class="line">locale-gen</span><br><span class="line">export LC_ALL=en_US.UTF-8</span><br><span class="line"></span><br><span class="line"># Add tools and build dependencies:</span><br><span class="line">apt update</span><br><span class="line">apt install build-essential git lintian debhelper iasl nasm \</span><br><span class="line">  python uuid-dev gcc-aarch64-linux-gnu bc python3-distutils -y</span><br><span class="line"></span><br><span class="line"># Clone my patched source</span><br><span class="line">git clone -b macos-support-proxmox-6.0 https://github.com/thenickdude/pve-edk2-firmware.git</span><br><span class="line"></span><br><span class="line"># Build it</span><br><span class="line">cd pve-edk2-firmware</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">dpkg -i pve-edk2-firmware_*.deb</span><br><span class="line"></span><br><span class="line"># Prevent it from being replaced later by apt upgrade:</span><br><span class="line">apt-mark hold pve-edk2-firmware</span><br></pre></td></tr></table></figure><h2 id="4-設置直通"><a href="#4-設置直通" class="headerlink" title="4 設置直通"></a>4 設置直通</h2><p>首先，編輯grub<code>vim /etc/default/grub</code><br>將<code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</code>改為<code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet intel_iommu=on video=efifb:off&quot;</code><br><strong>（若是amd則改為amd_iommu=on）</strong></p><p>執行<code>update-grub</code>命令更新grub信息<br>最後輸入<code>dmesg | grep -e DMAR -e IOMMU</code>命令檢查是否有錯<br>然後編輯/etc/modules <code>nano /etc/modules</code><br>在最尾加入以下四行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vfio</span><br><span class="line">vfio_iommu_type1</span><br><span class="line">vfio_pci</span><br><span class="line">vfio_virqfd</span><br></pre></td></tr></table></figure><p>再次輸入<code>dmesg | grep ecap</code>命令檢查設備是否支持iommu<br>然後執行以下命令將驅動加入黑名單</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;blacklist radeon&quot; &gt;&gt; /etc/modprobe.d/blacklist.conf</span><br><span class="line">echo &quot;blacklist nouveau&quot; &gt;&gt; /etc/modprobe.d/blacklist.conf</span><br><span class="line">echo &quot;blacklist nvidia&quot; &gt;&gt; /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure><p>執行<code>update-initramfs -u</code>命令更新信息<br>執行<code>lspci</code>，找出顯卡的代號（例如01：00），然後執行<code>lspci -n -s 01:00</code><br>得到類似以下的輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">01:00.0 0300: 10de:1d01 (rev a1)</span><br><span class="line">01:00.1 0403: 10de:0fb8 (rev a1)</span><br></pre></td></tr></table></figure><p>其中<code>10de:1d01</code>與<code>10de:0fb8</code>是vendor IDs<br>將vendor IDs指定到VFIO模塊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;options vfio-pci ids=10de:1d01,10de:0fb8&quot; &gt; /etc/modprobe.d/vfio.conf</span><br></pre></td></tr></table></figure><p>進入web管理介面</p><ul><li>在vm的硬件選項卡中編輯添加PCI設備</li><li>選定顯卡對應的<code>01:00.0</code>與<code>01:00.1</code></li><li>在<code>01:00.0</code>（顯示設備）中勾選<ul><li>PCI-Express</li><li>All Functions</li><li>主GPU</li></ul></li><li>檢查文件<code>/etc/pve/qemu-server/YOUR-VM-ID.conf</code><ul><li>確保01:00後的參數正確</li></ul></li></ul><p><strong>e.g.</strong><code>hostpci0: 01:00,x-vga=1,pcie=1</code></p><p>然後，直通鼠標鍵盤到VM中，添加USB設備，選擇鼠標鍵盤，然後添加到VM</p><h2 id="5-安裝Mojave"><a href="#5-安裝Mojave" class="headerlink" title="5 安裝Mojave"></a>5 安裝Mojave</h2><p>現在啟動你的虛擬機，若你設置了直通，啟動的一瞬間會發生以下事情</p><ul><li>連接在你顯卡的顯示器應該會從PVE的ttl介面變為黑屏，然後變成OVMF UEFI啟動介面。</li><li>你的鍵盤鼠標這時候也可以直接控制虛擬機。</li></ul><p>在啟動的時候趕快按下F2以進入OVMF設置畫面。</p><ol><li>進入Device Manager</li><li>選擇OVMF platform configuration</li><li>設置分辨率為1920x1080</li><li>保存設置</li><li>在根菜單下選擇Reset（不是continue）</li></ol><p>然後你應該進入了Clover，接下來跟著指引安裝系統<br>全部安裝完畢之後，再次啟動時</p><ol><li>手動按下F2</li><li>選定Clover啟動項</li></ol><p>然後才會看到磁盤內的Mac系統。<br>進入Mac系統後，打開終端，輸入<code>diskutil list</code><br>以檢查設備<br>然後輸入<code>sudo dd if=&lt;Clover CD的EFI分區&gt; of=&lt;硬盤的EFI分區&gt;</code><br>將Clover安裝到硬盤中</p><blockquote><p>你也可以忽略這一步，將Clover CD永久掛載在虛擬機下</p></blockquote><p>關機，移除CLover CD，從硬盤啟動。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在PVE中安裝macOS-Mojave並設置直通顯卡&quot;&gt;&lt;a href=&quot;#在PVE中安裝macOS-Mojave並設置直通顯卡&quot; class=&quot;headerlink&quot; title=&quot;在PVE中安裝macOS Mojave並設置直通顯卡&quot;&gt;&lt;/a&gt;在PVE中安裝macOS Mojave並設置直通顯卡&lt;/h1&gt;&lt;h2 id=&quot;先決條件：&quot;&gt;&lt;a href=&quot;#先決條件：&quot; class=&quot;headerlink&quot; title=&quot;先決條件：&quot;&gt;&lt;/a&gt;先決條件：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;8G或以上內存&lt;/li&gt;
&lt;li&gt;支持虛擬化以及SSE4.2的cpu&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;包括AMD與INTEL&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技術相關" scheme="https://www.kappu.ml/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="Proxmox" scheme="https://www.kappu.ml/tags/Proxmox/"/>
    
      <category term="黑蘋果" scheme="https://www.kappu.ml/tags/%E9%BB%91%E8%98%8B%E6%9E%9C/"/>
    
      <category term="macOS" scheme="https://www.kappu.ml/tags/macOS/"/>
    
      <category term="直通" scheme="https://www.kappu.ml/tags/%E7%9B%B4%E9%80%9A/"/>
    
  </entry>
  
  <entry>
    <title>安裝Proxmox VE</title>
    <link href="https://www.kappu.ml/2019/08/20/%E5%AE%89%E8%A3%9DProxmox%20VE/"/>
    <id>https://www.kappu.ml/2019/08/20/安裝Proxmox VE/</id>
    <published>2019-08-19T16:00:00.000Z</published>
    <updated>2019-08-22T10:25:33.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先決條件"><a href="#先決條件" class="headerlink" title="先決條件"></a>先決條件</h1><ul><li>支持VT-d或AMD-V的CPU</li><li>8G或以上的<strong>可完全擦除磁盤</strong>，或8G以上的U盤用作Proxmox VE的系統盤</li><li>另外一隻2G以上的U盤</li></ul><hr><h1 id="下載Proxmox-VE的安裝鏡像"><a href="#下載Proxmox-VE的安裝鏡像" class="headerlink" title="下載Proxmox VE的安裝鏡像"></a>下載Proxmox VE的安裝鏡像</h1><p><a href="https://www.proxmox.com/en/downloads" target="_blank" rel="noopener">官方載點</a></p><a id="more"></a><h1 id="安裝過程"><a href="#安裝過程" class="headerlink" title="安裝過程"></a>安裝過程</h1><p>將ISO文件寫入2G以上大小的U盤，製作啟動介質</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=~/Downloads/Proxmox.iso of=/dev/sdx</span><br><span class="line"><span class="comment"># Proxmox.iso是你下載的鏡像，而/dev/sdx是你的U盤設備（2G以上）</span></span><br></pre></td></tr></table></figure><p>寫入完畢之後，輸入命令<code>reboot</code>重啟電腦</p><ol><li>進入電腦UEFI設置介面，開啟VT-d或AMD-V，設置2G的閃存盤為首啟動項</li></ol><p><em>若你使用8G以上的U盤作為系統盤，請在這個時候插入</em></p><ol start="2"><li>保存UEFI設置，重啟電腦</li><li>啟動Proxmox VE安裝程序，選擇<code>Install Proxmox VE</code>，進入自檢畫面，等待數秒至數分鐘<br><img src="http://cdn2.myxzy.com/uploadfile/201808/dd9b1533341753.png" alt="安裝程序畫面"></li><li>同意協議，按“Agree”<br><img src="http://cdn2.myxzy.com/uploadfile/201808/a7051533342697.png" alt="協議畫面"></li><li>選擇硬盤，請根據磁盤容量<strong>選擇正確的硬盤</strong><br><img src="http://cdn2.myxzy.com/uploadfile/201808/ba661533342698.png" alt="硬盤畫面"></li></ol><blockquote><p>Proxmox VE安裝<strong>不可以選擇安裝在某個硬盤的某個分區</strong></p><p>一旦選擇安裝，便會<strong>重新分區整個硬盤</strong>，請準備可以<strong>完全擦除</strong>的磁盤設備</p></blockquote><ul><li>設定國家、時區與鍵盤，在Country輸入China、Taiwan或Hong Kong都會直接填充時區信息<br><img src="http://cdn2.myxzy.com/uploadfile/201808/93e51533342699.png" alt="時區與地區"></li><li>設定管理員root帳號密碼郵箱<br><img src="http://cdn2.myxzy.com/uploadfile/201808/55321533342700.png" alt="帳戶密碼"></li><li>設定主機名、IP、網關、掩碼與DNS，設置完畢後點擊Next開始安裝<br><img src="http://cdn2.myxzy.com/uploadfile/201808/03fa1533342702.png" alt="網絡信息"></li></ul><p><strong>安裝完畢需要手動重啟，點擊右下角Reboot重啟</strong><br><img src="http://cdn2.myxzy.com/uploadfile/201808/c0b81533342704.png" alt="Reboot"></p><p>Proxmox VE會在啟動後<strong>於主機的ttl控制台中顯示Web控制台的URL</strong>，此URL<strong>只接受HTTPS</strong><br><img src="http://cdn2.myxzy.com/uploadfile/201808/da1c1533342705.png" alt="TTLURL"><br>使用<strong>安裝的時候設置的</strong>root帳戶密碼，登入網頁端，顯示Proxmox VE的網頁控制台。<br><img src="http://cdn2.myxzy.com/uploadfile/201808/d97a1533343912.png" alt="WEB"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;先決條件&quot;&gt;&lt;a href=&quot;#先決條件&quot; class=&quot;headerlink&quot; title=&quot;先決條件&quot;&gt;&lt;/a&gt;先決條件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;支持VT-d或AMD-V的CPU&lt;/li&gt;
&lt;li&gt;8G或以上的&lt;strong&gt;可完全擦除磁盤&lt;/strong&gt;，或8G以上的U盤用作Proxmox VE的系統盤&lt;/li&gt;
&lt;li&gt;另外一隻2G以上的U盤&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;下載Proxmox-VE的安裝鏡像&quot;&gt;&lt;a href=&quot;#下載Proxmox-VE的安裝鏡像&quot; class=&quot;headerlink&quot; title=&quot;下載Proxmox VE的安裝鏡像&quot;&gt;&lt;/a&gt;下載Proxmox VE的安裝鏡像&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.proxmox.com/en/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方載點&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技術相關" scheme="https://www.kappu.ml/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="Proxmox" scheme="https://www.kappu.ml/tags/Proxmox/"/>
    
      <category term="教程" scheme="https://www.kappu.ml/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>實現家庭綜合服務器——給Proxmox VE中的Win10直通顯卡</title>
    <link href="https://www.kappu.ml/2019/08/20/%E5%AF%A6%E7%8F%BE%E5%AE%B6%E5%BA%AD%E7%B6%9C%E5%90%88%E6%9C%8D%E5%8B%99%E5%99%A8%E2%80%94%E2%80%94%E7%B5%A6Proxmox%20VE%E4%B8%AD%E7%9A%84Win10%E7%9B%B4%E9%80%9A%E9%A1%AF%E5%8D%A1/"/>
    <id>https://www.kappu.ml/2019/08/20/實現家庭綜合服務器——給Proxmox VE中的Win10直通顯卡/</id>
    <published>2019-08-19T16:00:00.000Z</published>
    <updated>2019-08-22T10:25:33.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>話説我弟最近上中學，他開始需要使用電腦做學校的課業，而我家裏有一臺chromebook、台機和一臺特別破舊的超極本。</p><p>超極本的發熱已經接近70度，可以把人手烤焦，chromebook的系統不支援他學校的CD軟體，而我的臺機，有太多的不可見人的東西，更是不能給他使用。</p><p>但是教育乃一切之本，他的生日也臨近，想給他送個禮物，於是看到了我家不斷跑著OVM、ikuai、web-server和域名ddns的伺服器，突然覺得，可以壓縮一下前面幾個服務的性能，給他搭建一個能用的電腦操作平臺。</p><a id="more"></a><p><strong>大致的想法就是買個基礎顯卡，買個固態硬盤直通到虛擬機，然後直通USB口，把這些綫捆成一坨拉到他的房間，給他個電腦屏幕和鍵盤。</strong></p><p><strong><em>我還想把成本控制在1000塊錢以内來著</em></strong></p><h1 id="原有機件介紹"><a href="#原有機件介紹" class="headerlink" title="原有機件介紹"></a>原有機件介紹</h1><p>服務器是一臺大致如下配置的服務器</p><table><thead><tr><th align="center">配件</th><th align="center">型號</th><th align="center">已用</th></tr></thead><tbody><tr><td align="center">主板</td><td align="center">B75</td><td align="center">/</td></tr><tr><td align="center">SATA口</td><td align="center">2*3.0+4*2.0</td><td align="center">已用3</td></tr><tr><td align="center">PCI-E插槽</td><td align="center">2条PCI-E*16</td><td align="center">已用一條用於網卡</td></tr><tr><td align="center">CPU</td><td align="center">i5-3330</td><td align="center">虛擬機1+1+4+4+2</td></tr><tr><td align="center">RAM</td><td align="center">8G*2 DDR3 1600</td><td align="center">已用512M*3+1.5G+2G=5G</td></tr></tbody></table><p><img src="/images/01.png" alt="Screenshot 2019-08-19 at 14.01.22.png"></p><p>可以看到CPU部分略微吃緊，而RAM依然有機會分配8G給虛擬機使用，PCI-E插槽可以容納一張獨立顯卡，硬盤也可以插多一張SSD。</p><p>找時間把各種吃CPU的服務搬出伺服器為上策。</p><h1 id="需要添置的硬件"><a href="#需要添置的硬件" class="headerlink" title="需要添置的硬件"></a>需要添置的硬件</h1><p>由於我是要給現有的伺服器增加一個Win10，並給他加上顯卡與硬盤等等外設，還要讓他可以在遠處傳輸，於是這需要以下配件。</p><table><thead><tr><th align="center">配件</th><th align="center">名稱</th><th align="center">價格</th></tr></thead><tbody><tr><td align="center">顯卡</td><td align="center">RX550 2G半高顯卡</td><td align="center">333港幣</td></tr><tr><td align="center">硬盤</td><td align="center">240G臺電SSD</td><td align="center">210港幣</td></tr><tr><td align="center">USB延長綫</td><td align="center">/</td><td align="center">142港幣</td></tr><tr><td align="center">HDMI延長綫</td><td align="center">/</td><td align="center">128港幣</td></tr><tr><td align="center">總價</td><td align="center"></td><td align="center">814港幣</td></tr></tbody></table><p>總而言之價格是控制在了1000港幣以内，算是完成目标。</p><p><em>等到我有空，買完所有需要的配件就開搞</em></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h1&gt;&lt;p&gt;話説我弟最近上中學，他開始需要使用電腦做學校的課業，而我家裏有一臺chromebook、台機和一臺特別破舊的超極本。&lt;/p&gt;
&lt;p&gt;超極本的發熱已經接近70度，可以把人手烤焦，chromebook的系統不支援他學校的CD軟體，而我的臺機，有太多的不可見人的東西，更是不能給他使用。&lt;/p&gt;
&lt;p&gt;但是教育乃一切之本，他的生日也臨近，想給他送個禮物，於是看到了我家不斷跑著OVM、ikuai、web-server和域名ddns的伺服器，突然覺得，可以壓縮一下前面幾個服務的性能，給他搭建一個能用的電腦操作平臺。&lt;/p&gt;
    
    </summary>
    
      <category term="技術相關" scheme="https://www.kappu.ml/categories/%E6%8A%80%E8%A1%93%E7%9B%B8%E9%97%9C/"/>
    
    
      <category term="Proxmox" scheme="https://www.kappu.ml/tags/Proxmox/"/>
    
      <category term="直通" scheme="https://www.kappu.ml/tags/%E7%9B%B4%E9%80%9A/"/>
    
  </entry>
  
</feed>
